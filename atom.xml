<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LittleYe233&#39;s Blog</title>
  
  
  <link href="https://blog.tamako.work/atom.xml" rel="self"/>
  
  <link href="https://blog.tamako.work/"/>
  <updated>2022-12-07T12:03:58.000Z</updated>
  <id>https://blog.tamako.work/</id>
  
  <author>
    <name>LittleYe233</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kotlin 简要语法快速学习</title>
    <link href="https://blog.tamako.work/techdev/kotlin/quick-learning/"/>
    <id>https://blog.tamako.work/techdev/kotlin/quick-learning/</id>
    <published>2022-12-07T12:03:58.000Z</published>
    <updated>2022-12-07T12:03:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为一些机缘巧合, 笔者需要研究一下 Android 应用程序的二次开发, 作为目标的软件恰好是使用 Kotlin 编写的, 而笔者尚无该编程语言的基础, 因此需要快速掌握 Kotlin 的一些重要语法.</p><span id="more"></span><p>笔者对 Kotlin 语法糖多早有所耳闻. 考虑到官方文档 (或者说, 笔者本次参考的资料) 未必对所有的语法特性都能面面俱到, 笔者在这篇文章中, 可能只会涉及到部分语法糖.</p><p>需要注意的是, 本文只会聚焦于 Kotlin 的<strong>语法规则</strong>, 并辅以一些具体例子, 并不会在这里谈 Kotlin 是如何<strong>编译</strong>源代码的, Kotlin 是如何应用到 <strong>Android 开发</strong>的, 诸如此类.</p><p>借用 Arch Linux 软件仓库 <a href="https://archlinux.org/packages/community/any/kotlin/">community/kotlin</a> 包的描述: Statically typed programming language that can interoperate with Java. 可以预料的是, Kotlin 和 Java 的语法规则有一定相似之处, 但笔者同样没有 Java 基础, 因此对这两门语言都比较陌生的读者也不用担心笔者跳过二者相似的部分不谈.</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h3><p>笔者主要参考的教程即为 Kotlin 的<a href="https://kotlinlang.org/docs/home.html">官方文档</a>, 并从 <a href="https://kotlinlang.org/docs/basic-syntax.html">Basic syntax</a> 章节开始.</p><p>同时, Kotlin 为已有变成基础的学习者提供了 <a href="https://kotlinlang.org/docs/learning-materials-overview.html">Learning materials overview</a> 的页面, 其中的第一章节同样是 Basic syntax.</p><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>Kotlin <a href="https://kotlinlang.org/docs/getting-started.html#install-kotlin">官方文档</a>中建议使用 <a href="https://www.jetbrains.com/idea/download/">IntelliJ IDEA</a> 和 <a href="https://developer.android.com/studio">Android Studio</a> 来进行 Kotlin 开发, 但对于语法学习则不必要使用这些 IDE (更何况后者从名字上就像是针对 Android 开发的). 本次学习过程中, 笔者选择在 Arch Linux 中直接安装 community/kotlin 的包 (版本号为 1.7.22) 作为编译环境, <a href="https://archlinux.org/packages/extra/x86_64/jdk17-openjdk/">extra/jdk17-openjdk</a> 包 (版本号为 17.0.5.u1) 作为生成的 JAR 包的运行环境. 读者可以搭配装载 Kotlin 相关<a href="https://marketplace.visualstudio.com/items?itemName=fwcd.kotlin">插件</a>的 <a href="https://code.visualstudio.com/">Visual Studio Code</a> 用以编辑 Kotlin 源代码.</p><h2 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h2><p>这里笔者略去 JVM 等细节, 仅说明命令行环境下如何编译单文件 Kotlin 源代码.</p><p>假设需要编译的源代码文件路径为 <code>/path/to/kotlin-learning/helloworld.kt</code>. 保证 Java 运行时环境和 Kotlin 编译器安装的情况下, 执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/kotlin-learning</span><br><span class="line">kotlinc helloworld.kt -include-runtime -d helloworld.jar</span><br><span class="line">java -jar helloworld.jar</span><br></pre></td></tr></table></figure><h2 id="包的声明与导入"><a href="#包的声明与导入" class="headerlink" title="包的声明与导入"></a>包的声明与导入</h2><p>熟悉 Java 语法的读者应该很习惯诸如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapp;</span><br></pre></td></tr></table></figure><p>的代码. 在 Kotlin 中一般仍然需要编写类似的结构, 这是因为 Kotlin 同样依赖”包” (package) 的结构来组织代码. 显而易见的是点分隔符 <code>.</code> 规定了包之间的层级关系. 暂时可以简单理解为这声明了代码文件的”ID”. 不过需要注意的是, Kotlin 中的包声明不必要与实际的文件系统结构一致, 也就是说, 声明了 <code>com.example.myapp</code> 的代码文件的路径不必要是 <code>com/example/myapp.kt</code>.</p><p>声明包名之后, 就可以通过 <code>import</code> 语句导入其他包, 乃至其他 (诸如顶级函数和属性, 枚举类型常数等):</p><figure class="highlight kotlin"><figcaption><span>package_example.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ktlearning,package_example</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入包 `OneFile`</span></span><br><span class="line"><span class="keyword">import</span> ktlearning.one_package.OneFile</span><br><span class="line"><span class="comment">// 导入包 `another_package` 下的所有子包</span></span><br><span class="line"><span class="keyword">import</span> ktlearning.another_package.*</span><br><span class="line"><span class="comment">// 避免包名冲突</span></span><br><span class="line"><span class="keyword">import</span> ktlearning.another_another_package.OneFile <span class="keyword">as</span> AnotherFile</span><br><span class="line"><span class="comment">// 导入顶级函数 `TopLevelFunc`</span></span><br><span class="line"><span class="keyword">import</span> ktlearning.another_another_package.AnotherFile.TopLevelFunc</span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><p>Kotlin 需要主函数作为程序的入口. 主函数通常写作:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这类似于 Java 中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 Kotlin 的代码中, 可以看出这个主函数 <code>main(args)</code> 接受一个 <code>String</code> 类型的数组 (<code>Array</code>). 当然在当前版本的 Kotlin 中, 主函数可以省去 <code>args</code> 这一参数. 函数体中未使用该参数反而会触发警告.</p><p>对于这个参数, 一个常见的操作是直接将其转化为字符串并输出:</p><figure class="highlight kotlin"><figcaption><span>example.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(args.contentToString())</span><br></pre></td></tr></table></figure><p>例如 <code>java -jar example.jar foo 1024 &quot;bar baz&quot;</code> 的输出将为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[foo, 1024, bar baz]</span><br></pre></td></tr></table></figure><p>有趣的是, 若将 <code>.contentToString()</code> 删去, Kotlin 依然可以编译, 但最终可能会输出诸如</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Ljava.lang.String;@4f47d241</span><br></pre></td></tr></table></figure><p>的错误结果.</p><h2 id="输出到标准输出-standard-output"><a href="#输出到标准输出-standard-output" class="headerlink" title="输出到标准输出 (standard output)"></a>输出到标准输出 (standard output)</h2><figure class="highlight kotlin"><figcaption><span>helloworld.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ktlearning.helloworld</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello world!&quot;</span>)</span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&quot; more &quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;hello world!\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello world!</span><br><span class="line">1 more hello world!</span><br></pre></td></tr></table></figure><p>Kotlin 支持 <code>print(message)</code> 和 <code>println(message)</code> 两种输出到标准输出的方式. 需要注意的是这两个函数只接受<strong>单一</strong>变量参数.</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>“属性” (property) 这个概念被归类于 Classes and objects 这一章节中. 这个术语可能更常在面向对象编程中提及. 当然, 本文之前涉及到的完整的可编译代码似乎并没有显式地涉及到面向对象 (例如, 没有出现 <code>class</code> 这一关键字), 不过 Kotlin 中依然将诸如其他编程语言中很早提及的 “不可变变量” (immutable variable) 和 “可变变量” (mutable variable) 都视为一种 “属性” - 这表明它们可以具有传统的 “变量” 所缺失的特性.</p><p>Kotlin 中同样有 “编译时常量” (compile-time constant) 的概念. 根据<a href="https://kotlinlang.org/docs/properties.html#compile-time-constants">官方文档</a>相关的表述, 这类属性若在编译时值已知, Kotlin 编译器则可以在编译期间将对其的引用替换为实际的值.</p><p>试图定义传统意义上的 “变量” 和 “常量” 时:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义不可变变量</span></span><br><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// 定义可变变量</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="comment">// 定义编译时常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> PI = <span class="number">3.14159</span></span><br></pre></td></tr></table></figure><h3 id="getters-和-setters"><a href="#getters-和-setters" class="headerlink" title="getters 和 setters"></a>getters 和 setters</h3><p>如果可以提前涉及到一些面向对象的内容的话, 既然这些概念都可以被抽象为 “属性”, 那面向对象中 getter 和 setter 的存在就不可被略过了. Kotlin 中对可变属性的完整定义语法如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &lt;propertyName&gt;[: &lt;PropertyType&gt;] [= &lt;property_initializer&gt;]</span><br><span class="line">    [&lt;getter&gt;]</span><br><span class="line">    [&lt;setter&gt;]</span><br></pre></td></tr></table></figure><p>不可变属性的则如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> &lt;propertyName&gt;[: &lt;PropertyType&gt;] [= &lt;property_initializer&gt;]</span><br><span class="line">    [&lt;getter&gt;]</span><br><span class="line">    <span class="comment">// 不允许定义 setter</span></span><br></pre></td></tr></table></figure><p>一些简单的定义示例如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动推断为 `Int` 类型, 具有默认的 getter 和 setter</span></span><br><span class="line"><span class="keyword">var</span> initialized = <span class="number">1</span></span><br><span class="line"><span class="comment">// 为 `Int` 类型不可变属性设置自定义 getter</span></span><br><span class="line"><span class="keyword">val</span> area: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">get</span>() = <span class="keyword">this</span>.width * <span class="keyword">this</span>.height</span><br><span class="line"><span class="comment">// 同时根据 getter 自动推断</span></span><br><span class="line"><span class="keyword">val</span> area2 <span class="keyword">get</span>() = <span class="keyword">this</span>.width * <span class="keyword">this</span>.height</span><br></pre></td></tr></table></figure><h3 id="backing-fields"><a href="#backing-fields" class="headerlink" title="backing fields"></a>backing fields</h3><p>若涉及到在属性的 setter 中为属性本身赋值时, 为避免出现无限递归的情形, Kotlin 引入了一个 “内部属性” <code>field</code> 用以 “临时” 存储属性值:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span></span><br><span class="line">    <span class="keyword">set</span>(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            field = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果将上述代码块中的 <code>field = value</code> 改为 <code>counter = value</code>, 编译器则会抛出堆栈溢出的错误.</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Kotlin 中任何事物皆是对象. 这里仅讨论一些基本的数据类型.</p><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><table><thead><tr><th align="center">类型</th><th align="center">字节数</th></tr></thead><tbody><tr><td align="center"><code>Byte</code></td><td align="center">1</td></tr><tr><td align="center"><code>Short</code></td><td align="center">2</td></tr><tr><td align="center"><code>Int</code></td><td align="center">4</td></tr><tr><td align="center"><code>Long</code></td><td align="center">8</td></tr></tbody></table><p>与一些编程语言相同, 在类型自动推断中, 可以在数字末尾添加 <code>L</code> (例如 <code>1L</code>) 来声明其类型为 <code>Long</code> 而不是默认的 <code>Int</code>.</p><p>参见 <a href="https://kotlinlang.org/docs/numbers.html#integer-types">Integer types</a>.</p><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><table><thead><tr><th align="center">类型</th><th align="center">字节数</th><th align="center">significant bits</th><th align="center">exponent bits</th><th align="center">decimal digits</th></tr></thead><tbody><tr><td align="center"><code>Float</code></td><td align="center">4</td><td align="center">24</td><td align="center">8</td><td align="center">6-7</td></tr><tr><td align="center"><code>Double</code></td><td align="center">8</td><td align="center">53</td><td align="center">11</td><td align="center">15-16</td></tr></tbody></table><p>同样, 在数字末尾添加 <code>f</code> 或 <code>F</code> (例如 <code>3.14f</code>) 来声明其类型为 <code>Float</code> 而不是默认的 <code>Double</code>.</p><p>需要注意的是, 浮点型和整型之间不会<strong>自动转换</strong>. 例如如下的代码会抛出编译错误:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Double</span>, b: <span class="type">Double</span>)</span></span> = a + b</span><br><span class="line"><span class="comment">// `1` 不是 `Double` 类型</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2.0</span>)</span><br></pre></td></tr></table></figure><p>参见 <a href="https://kotlinlang.org/docs/numbers.html#floating-point-types">Floating-point types</a>.</p><h3 id="无符号整型"><a href="#无符号整型" class="headerlink" title="无符号整型"></a>无符号整型</h3><p>只需要在原有的数据类型前添加 <code>U</code> (例如 <code>UByte</code>) 即可.</p><p>同样, 在数字末尾添加 <code>u</code> (例如 <code>1u</code>) 来声明其类型为无符号类型. 类似的, <code>ul</code> 或 <code>UL</code> 声明其类型为 <code>ULong</code>.</p><h3 id="特殊的数字表示"><a href="#特殊的数字表示" class="headerlink" title="特殊的数字表示"></a>特殊的数字表示</h3><p>除了上文提及的 <code>f</code> / <code>F</code> 和 <code>L</code>, Kotlin 还支持其他特别的数字表示方法:</p><table><thead><tr><th align="center">特殊表示</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">二进制整型</td><td align="center"><code>0b00001111</code></td></tr><tr><td align="center">八进制整型</td><td align="center"><strong>不支持</strong></td></tr><tr><td align="center">十六进制整型</td><td align="center"><code>0x0F</code></td></tr><tr><td align="center">科学计数法</td><td align="center"><code>1.0e24</code></td></tr></tbody></table><p>同时, Kotlin 支持在数字之间增加下划线 (<code>_</code>) 来增加可读性:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> oneMillion = <span class="number">1_000_000</span></span><br><span class="line"><span class="keyword">val</span> creditCardNumber = <span class="number">1234_5678_9012_3456L</span></span><br><span class="line"><span class="keyword">val</span> socialSecurityNumber = <span class="number">999_99_9999L</span></span><br><span class="line"><span class="keyword">val</span> hexBytes = <span class="number">0xFF_EC_DE_5E</span></span><br><span class="line"><span class="keyword">val</span> bytes = <span class="number">0b11010010_01101001_10010100_10010010</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>上文中已经出现了主函数的定义和使用方法. 对于一个通常的函数, 例如实现两个整数的加法:</p><figure class="highlight kotlin"><figcaption><span>func_sum.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ktlearning.func_sum</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通常的函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum1</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接定义其返回值的函数定义, 同时实现了类型推断</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum2</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义无返回值的函数 (`Unit` 可以省略)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Sum of <span class="variable">$a</span> and <span class="variable">$b</span> is <span class="subst">$&#123;a + b&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> a = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;Sum of <span class="variable">$a</span> and <span class="variable">$b</span> is <span class="subst">$&#123;sum1(a, b)&#125;</span>&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;Sum of <span class="variable">$a</span> and <span class="variable">$b</span> is <span class="subst">$&#123;sum2(a, b)&#125;</span>&quot;</span>)</span><br><span class="line">    printSum(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>直接用例子说明:</p><figure class="highlight kotlin"><figcaption><span>oop_shape.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ktlearning.oop_shape</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可继承的类前加 `open`</span></span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Shape</span>(name: String) &#123;</span><br><span class="line">    <span class="comment">// the primary constructor</span></span><br><span class="line">    <span class="keyword">var</span> name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">say</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;My name is <span class="subst">$&#123;this.name&#125;</span>!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">val</span> area: <span class="built_in">Double</span> = <span class="number">0.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(name: String, width: <span class="built_in">Double</span>, height: <span class="built_in">Double</span>) : Shape(name) &#123;</span><br><span class="line">    <span class="keyword">var</span> width = width</span><br><span class="line">    <span class="keyword">var</span> height = height</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载父类的属性</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> area: <span class="built_in">Double</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">this</span>.width * <span class="keyword">this</span>.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(name: String, radius: <span class="built_in">Double</span>) : Shape(name) &#123;</span><br><span class="line">    <span class="keyword">val</span> PI = <span class="number">3.1415926</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> radius = radius</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> area: <span class="built_in">Double</span></span><br><span class="line">        <span class="keyword">get</span>() = PI * <span class="keyword">this</span>.radius * <span class="keyword">this</span>.radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> rect = Rectangle(<span class="string">&quot;My Rectangle&quot;</span>, <span class="number">2.0</span>, <span class="number">3.5</span>)</span><br><span class="line">    <span class="keyword">val</span> circ = Circle(<span class="string">&quot;My Circle&quot;</span>, <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">    rect.say()</span><br><span class="line">    circ.say()</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;The area of <span class="subst">$&#123;rect.name&#125;</span> is <span class="subst">$&#123;rect.area&#125;</span>&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;The area of <span class="subst">$&#123;circ.name&#125;</span> is <span class="subst">$&#123;circ.area&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">My name is My Rectangle!</span><br><span class="line">My name is My Circle!</span><br><span class="line">The area of My Rectangle is 7.0</span><br><span class="line">The area of My Circle is 12.5663704</span><br></pre></td></tr></table></figure><p>参见 <a href="https://kotlinlang.org/docs/basic-syntax.html#creating-classes-and-instances">Creating classes and instances</a>.</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    块注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    下面是内层块注释.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    <span class="comment">/* 内层块注释 */</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    上面是内层块注释</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="条件结构"><a href="#条件结构" class="headerlink" title="条件结构"></a>条件结构</h2><h3 id="if-语句块"><a href="#if-语句块" class="headerlink" title="if 语句块"></a><code>if</code> 语句块</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &gt; b)</span><br><span class="line">    println(a)</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><p>相对的, C 中为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python 中为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><p><del>(个人认为 Python 的条件表达式的结构经常写错, 因为条件被插入在两个分支表达式之间.)</del></p><h3 id="when"><a href="#when" class="headerlink" title="when"></a><code>when</code></h3><p>Kotlin 中的 <code>when</code> 类似于 C 中的 <code>switch</code>, 但其用法更加灵活:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="comment">// 左侧可以是一个表达式, 用以匹配</span></span><br><span class="line">    <span class="number">1</span> -&gt; println(<span class="string">&quot;x == 1&quot;</span>)</span><br><span class="line">    <span class="number">2</span> -&gt; println(<span class="string">&quot;x == 2&quot;</span>)</span><br><span class="line">    <span class="comment">// 不匹配上述所有表达式</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">        println(<span class="string">&quot;x is neither 1 nor 2&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `when` 也可以作为表达式</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">describe</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: String =</span><br><span class="line">    <span class="keyword">when</span> (obj) &#123;</span><br><span class="line">        <span class="number">1</span>          -&gt; <span class="string">&quot;One&quot;</span></span><br><span class="line">        <span class="string">&quot;Hello&quot;</span>    -&gt; <span class="string">&quot;Greeting&quot;</span></span><br><span class="line">        <span class="comment">// 可以包含条件表达式</span></span><br><span class="line">        <span class="keyword">is</span> <span class="built_in">Long</span>    -&gt; <span class="string">&quot;Long&quot;</span></span><br><span class="line">        !<span class="keyword">is</span> String -&gt; <span class="string">&quot;Not a string&quot;</span></span><br><span class="line">        <span class="keyword">else</span>       -&gt; <span class="string">&quot;Unknown&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isPositive</span><span class="params">(x: <span class="type">Int</span>)</span></span> = <span class="keyword">when</span> (x) &#123;</span><br><span class="line">    <span class="comment">// 当覆盖所有可能性时, 无需 `else` 分支</span></span><br><span class="line">    x &gt; <span class="number">0</span> -&gt; <span class="literal">true</span></span><br><span class="line">    x &lt;= <span class="number">0</span> -&gt; <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a><code>for</code> 循环</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">6</span> downTo <span class="number">0</span> step <span class="number">2</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (elem <span class="keyword">in</span> array) &#123;</span><br><span class="line">    println(elem)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> array.indices) &#123;</span><br><span class="line">    println(array[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((i, elem) <span class="keyword">in</span> array.withIndex()) &#123;</span><br><span class="line">    println(<span class="string">&quot;array[<span class="variable">$i</span>] = <span class="variable">$elem</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a><code>while</code> 循环</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    x--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> y = retrieveData()</span><br><span class="line">&#125; <span class="keyword">while</span> (y != <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h2 id="可空值-nullable-values-和空值检查-null-checks"><a href="#可空值-nullable-values-和空值检查-null-checks" class="headerlink" title="可空值 (nullable values) 和空值检查 (null checks)"></a>可空值 (nullable values) 和空值检查 (null checks)</h2><p>可空类型需要在类型后添加 <code>?</code> 标识. <code>null</code> 则表示空值.</p><figure class="highlight kotlin"><figcaption><span>null_check.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若字符串不能表示一个整型, 则转化为 `null`</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseInt</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> str.toIntOrNull()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printProduct</span><span class="params">(arg1: <span class="type">String</span>, arg2: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> x = parseInt(arg1)</span><br><span class="line">    <span class="keyword">val</span> y = parseInt(arg2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能直接使用 `x * y`, 因为 `x` 和 `y` 可能为 `null`</span></span><br><span class="line">    <span class="keyword">if</span> (x != <span class="literal">null</span> &amp;&amp; y != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 空值检查后, 其类型自动转化为非空的整型</span></span><br><span class="line">        println(x * y)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;&#x27;<span class="variable">$arg1</span>&#x27; or &#x27;<span class="variable">$arg2</span>&#x27; is not a number&quot;</span>)</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    printProduct(<span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>)</span><br><span class="line">    printProduct(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;7&quot;</span>)</span><br><span class="line">    printProduct(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">42</span><br><span class="line">&#x27;a&#x27; or &#x27;7&#x27; is not a number</span><br><span class="line">&#x27;a&#x27; or &#x27;b&#x27; is not a number</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;因为一些机缘巧合, 笔者需要研究一下 Android 应用程序的二次开发, 作为目标的软件恰好是使用 Kotlin 编写的, 而笔者尚无该编程语言的基础, 因此需要快速掌握 Kotlin 的一些重要语法.&lt;/p&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    <category term="Tutorial" scheme="https://blog.tamako.work/categories/Essay/Tutorial/"/>
    
    
    <category term="Kotlin" scheme="https://blog.tamako.work/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>个人近况 (-2022.11)</title>
    <link href="https://blog.tamako.work/myself/recent/-2022-nov/"/>
    <id>https://blog.tamako.work/myself/recent/-2022-nov/</id>
    <published>2022-11-29T15:10:40.000Z</published>
    <updated>2022-11-29T15:10:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在是 2022 年 11 月 29 日夜间 23 时 10 分 40 秒，<a href="#%E5%A5%B3%E8%A3%85%E5%92%8C%E8%B7%A8%E6%80%A7%E5%88%AB">身着米黄色睡裙</a>。</p><p>挣扎了许久，我还是考虑写一下至今（2022 年 11 月底）的一些个人近况。时间跨度未知，纯粹看我的记忆最远能触及到何处。某种程度上，也是在一个公开的平台上对自己最近的一些行为的总结。<strong>可能会有对未来的展望。这个看我的时间安排如何。</strong></p><p>当然，这篇文字得以诞生，某种程度上也受到<strong>某个网站</strong>的激励（因为我暂时无法决定是否需要公开，故暂时隐去具体的地址）。同时，可能读者——也就是<em>你</em>——会发现这篇文章的风格和之前迥然不同。关于这篇文字创作的契机、那个“某个网站”以及本文展现出此种样貌的原因，将会在<a href="#%E5%85%B3%E4%BA%8E%E6%9C%AC%E6%96%87">后文</a>中提及。</p><p>全文可能较长，尤其是面面俱到地说的情况下。我尽可能把握好详略。</p><span id="more"></span><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>学生自然是要学习的。当然进了高校之后，学什么就不是别人（甚至是自己能控制的了）。</p><h3 id="常规课业"><a href="#常规课业" class="headerlink" title="常规课业"></a>常规课业</h3><p>这里说的“常规课业”，主要指的是我所在学校为我所在专业制定的培养方案中所规定的学科。除了数学等基础课、专业课之外，还包括文社科之类。</p><p>嗯……说实话，真的不太妙。</p><p>计入绩点并参与专业排名的文社科只有《马克思主义基本原理》一个。文社科我反而没那么担心。虽然比不过一些 95 分上下的卷王，但考试前多翻翻书，（如果可以的话）熟悉一下历年的卷子，想拿个 70 多分倒也没那么难。<del>（至于年轻的女老师很可爱让我没法大摆特摆这件事还是不提了。）</del></p><p>所以，现在最岌岌可危、极其容易喜提挂科的科目，反而是专业基础课——《模拟电子技术基础》。当然这门课本身也就不算容易学。不过最重要的是，我对于我现在身处的专业实在没什么兴趣。虽说计算机科学领域在本科阶段非科班也有机会超越科班水平，某种程度上我也可以在这一方面和科班的比一比。但不管怎么说，非科班的压力就在于，我必须要面对许多门我本身可能不必要学习的课程。如果同时有一些保研、出国的计划，这些课程也需要获得一定的分数，而不能仅限于勉强通过。所以，我还必须要花费一定的精力以维持自己的分数——每当这个时候，我不免想感慨自己的高考志愿是否合适。当然，<strong>这又有什么用呢</strong>？一般想到这一步就会乖乖继续去学习去了。</p><p>然而，正如我上面所说，这门课已经不是单纯的<strong>低分</strong>了，而是到了<strong>难以及格</strong>的地步。问有没有认真学，那我肯定只能遗憾地表示否定。所以，这说到底还是一种咎由自取。</p><p>剩下两门数学，一个是概率论，一个是复变函数。数学科目我还是有较大的把握的，至于最后考试分数如何，这就不是我能控制的了。“考试状态”，从小学开始提及，一直贯穿到人生的最后一门考试。这个概念有时太过抽象，反而让人（尤其是我）难以探明其究竟，以至于大学以来的考试跟抽奖差不多，抽到啥结果就是啥。</p><p>马上临近期末，考试月也来临了。希望最好能有个稍微好看点的结果吧。</p><h3 id="计算机科学"><a href="#计算机科学" class="headerlink" title="计算机科学"></a>计算机科学</h3><p>嗯，那我不学专业要求的科目，去学什么了呢？</p><p>虽然我特别想去研究计算机科学这一块，但说实话我还真的没怎么学。现在回过头来看，大概其中一个原因是，因为当下常规课业的压力加大，以及个人各种事务的增多以及心态的转变之类，我一度无暇顾及对其的探究。另一个原因是，我进错“赛道”了。我中途跑去研究机器学习的一些具体项目，甚至还试图加入了一个研究组（虽然目前还没有什么具体的进度，毕竟能力尚不足）。实际上利用机器学习的各种模型和算法之类来完成一些高位的具体需求，和偏数学、偏底层的计算机科学甚至可以说是两个世界的研究方向了。我承认像操作系统、编译器那些知识对我来说还有些难度。不过，所幸之前受本部一位学长的指点，加上个人的一些思考，我认为我应该还是更喜欢后者。所以我现在正在抽一点时间从著名的 <a href="https://csdiy.wiki/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/CSAPP/">CMU CS15213: CSAPP</a> 开始看起。之后可能是直接跳到 <a href="https://csdiy.wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/MIT6.S081/">MIT 6.S081: Operating System Engineering</a>。</p><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p>如同上面一节所说，跟了一个研究组。现在某种程度上还处在“选题”的阶段，所以也没什么好说的。</p><p><del>（我现在还在拿笔记本电脑的 CPU 跑项目……）</del></p><h2 id="女装和跨性别"><a href="#女装和跨性别" class="headerlink" title="女装和跨性别"></a>女装和跨性别</h2><p>本来这一块的内容应该单独在一个系列的文章中说的，不过考虑到这也属于“近况”的一部分，以及我现在实在是分身乏术，无力再撰写一个完整的系列，故会在这里提及一下。</p><p>我最早的女装尝试已不可考。大规模的女装尝试则是于去年（2021 年）十一国庆假期期间开始——具体来说，开始于高中同学寄来第一套女仆装的那一天。经过一番努力和多种尝试，我现在现存的各类女装大约有 20 套左右，而 <a href="#%E6%80%A7%E5%88%AB%E8%AE%A4%E5%90%8C">RLE</a>（Real-life experience）的程度则从最开始的躲在教学楼厕所到如今自然地穿着裙子在宿舍和楼梯道内活动。</p><p>从女装购买的类型偏好来看，现在主要偏向于日常类的裙子一类。个人认为这是一种观念上的好的转变。不过考虑到现在头晕头痛，还是按下不表为好（什么鬼）。</p><h3 id="性别认同"><a href="#性别认同" class="headerlink" title="性别认同"></a>性别认同</h3><p>有记录的首次知晓“药娘”这一概念的日期是 2022 年 3 月 15 日，有记录的首次查询“<a href="https://mtf.wiki/zh-cn/docs/">跨性别</a>”<a href="https://en.m.wikipedia.org/wiki/Transgender">维基百科</a>词条则是在同年 7 月上旬。</p><p>必须要承认的是，我的过去并没有与我认识的跨性别女性幼年期所拥有的<a href="https://genderdysphoria.fyi/zh/">性别烦躁</a>类似的经历——当几年前甚至十几年前的她们苦恼于与出生性别的固有形象不符而遭受的歧视时，我似乎按部就班地遵从父母和老师的教导顺利度过了初等和中等教育阶段。所以早先有的时候我会不自觉地思考：我现在<em>认定</em>的性别认同（女性）与<em>应当</em>（即排除了种种心理上的“错觉”之后的判断）的性别认同（即与出生性别相同的男性）是否存在不可调和的矛盾？——写这句话的时候，我是感觉很不和谐的，因为这仿佛都不在说人话。我当下认同自己的性别应该是女性，那从何处冒出来一个“应当”的性别认同？所幸，现在我已经几乎不再思考这一问题了。随着今年剩余的天数一点点减少，我对另一方向的性别的认同感有增无减。至少，上述的两种截然相反的性心理所产生的矛盾应该是化解了。</p><p>考虑性别转变的过程中，我的一些行为习惯和<a href="#ta"><em>某些</em></a>心理状态也悄然发生了转变。在外貌上有一些比较明显的尝试，例如：开始蓄长发（以前的头发真的太短了，也压根整不出什么发型来，当然这也是父母在我没什么特殊偏好下给出的 fallback）、开始用梳子（超级短的头发自然也用不上什么梳子了）、向别的跨性别女性咨询洗浴用品的款式、购买护肤品之类。至于其他的变化，如果有时间的话，就在新的系列专栏中再见吧。</p><h2 id="Ta"><a href="#Ta" class="headerlink" title="Ta"></a>Ta</h2><p>Ta，代指某一个人。</p><p>我和 Ta 在一个网站上第一次相遇。</p><p>Ta 带给了我很多，未曾有过的体验。</p><p>因为 Ta，我开始做出一些改变。</p><p>我不会在这里写 Ta。</p><p>但是我希望 Ta 能看到。</p><h2 id="心理状态"><a href="#心理状态" class="headerlink" title="心理状态"></a>心理状态</h2><p>我的心理状态，现在，很不好。<strong>很不好</strong>。</p><p>当然，我认为“很不好”，也不一定是真的“很不好”——在我父母看来，大概如此。我知道处于抑郁状态不代表患抑郁症，处于焦虑状态不代表患焦虑症，云云，类似于随机事件 $A$ 满足 $P(A)=1$ 不代表它是整个样本空间一样。但是，我自认为，我现在的心理状态肯定没有以前——甚至是一个月前——要好。</p><p>曾经的我被父母和老师认定是心态很好的人，而如今却发生了翻天覆地的转变。其转变的原因，我至今未能探明。现在的结果是，我比以往更容易陷入负面的情绪当中。之前还因为这些事情“被”辅导员谈过——当然是以心理疏导的名义，辅导员并没有对我施压之类。最近学校要求全校同学集体填写的心理测评量表中，一些测评项我给出了较为负面的回答，而那时我的心理状态其实还没到那么糟糕的程度。事实上我在当天晚上遇到一些事情，陷入“emo”的漩涡后，我立刻有了修改量表结果的冲动——不过我毕竟本性还是懒人，实在不想重新填写那几十道题目，就让它过去吧。</p><p>我的心路历程是可以作为近一个月来解释我的诸多行为、贯穿始终的一条主线的。同样的，因为时间和精力的原因，我无法在这里展开详谈。如果这个系列（“个人近况”以及其他相关的文章）不会终止于本篇文字的话，我大概可以以这个话题继续在这个系列中创作。</p><h2 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h2><p>前面写了这么多，现在才开始写本文的“关于页”（About page），确实有些奇怪。不过因为我到了晚上就容易神智不清，请各位多多谅解。</p><p>这个博客原本是主要注重技术的。受到早期个人固有性格的影响，我甚至连早期技术类博文的文风都尽可能控制成 Wiki 风格。不过，可能是因为考虑跨性别之类的缘故，或是诸位脑补出的一些契机，从而使我意识到了自己更多元的样子，现在我想要走出“冰冷机械”（可能有人会反驳，不过我现在没什么力气去争论）的技术的世界，去尝试用自己的双手描述自己，以一种更加自然的风格。原来还需要写的，是真正的——也就是本站的“<a href="/about">关于页</a>”。不过我觉得这一页需要更加审慎地去写，因此就暂时延后，而将本文提到最重要的日程上。</p><p>我有的时候自嘲自己是没什么能力、不可靠的工具人，对人际关系什么的几乎都不在意，只会摆弄自己手头的 tech works。不过呢，我认为，我现在的心态应该是变了。我愿意去拥抱跟原先不一样的生活，不论怎么说，这都是一种巨大的、可喜可贺的进步。</p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>从上面的只言片语中可以看出，狭义上对于本站未来的计划，我自然是会分出一部分写博客的时间来写写更偏向人文社科方面的内容，不仅仅是个人近况，包括文学作品、影视作品之类评价类的文字也可能会考虑收纳其中。而对于我在生活上后续的安排——其实也没什么特别的，走一步算一步。当然，就我目前的性别认同的状态，以及心理上的种种思绪，我可能会安排精神科或心理科的咨询。其他的，到时候再说吧。</p><p>对于本站技术上的改变，我可能会考虑修复<a href="https://github.com/LittleYe233/hexo-theme-amazingremake">本主题</a>的 bugs，以及对本博客增添一些功能性页面（关于页，之类）和评论区功能。</p><p>那么，让我们在下一篇博文中再见吧。</p><p><strong>敬请期待。</strong></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;现在是 2022 年 11 月 29 日夜间 23 时 10 分 40 秒，&lt;a href=&quot;#%E5%A5%B3%E8%A3%85%E5%92%8C%E8%B7%A8%E6%80%A7%E5%88%AB&quot;&gt;身着米黄色睡裙&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;挣扎了许久，我还是考虑写一下至今（2022 年 11 月底）的一些个人近况。时间跨度未知，纯粹看我的记忆最远能触及到何处。某种程度上，也是在一个公开的平台上对自己最近的一些行为的总结。&lt;strong&gt;可能会有对未来的展望。这个看我的时间安排如何。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，这篇文字得以诞生，某种程度上也受到&lt;strong&gt;某个网站&lt;/strong&gt;的激励（因为我暂时无法决定是否需要公开，故暂时隐去具体的地址）。同时，可能读者——也就是&lt;em&gt;你&lt;/em&gt;——会发现这篇文章的风格和之前迥然不同。关于这篇文字创作的契机、那个“某个网站”以及本文展现出此种样貌的原因，将会在&lt;a href=&quot;#%E5%85%B3%E4%BA%8E%E6%9C%AC%E6%96%87&quot;&gt;后文&lt;/a&gt;中提及。&lt;/p&gt;
&lt;p&gt;全文可能较长，尤其是面面俱到地说的情况下。我尽可能把握好详略。&lt;/p&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    <category term="Report" scheme="https://blog.tamako.work/categories/Essay/Report/"/>
    
    
    <category term="Self Analysis" scheme="https://blog.tamako.work/tags/Self-Analysis/"/>
    
    <category term="Cross-dressing" scheme="https://blog.tamako.work/tags/Cross-dressing/"/>
    
    <category term="Transgender" scheme="https://blog.tamako.work/tags/Transgender/"/>
    
    <category term="Recent Activities" scheme="https://blog.tamako.work/tags/Recent-Activities/"/>
    
  </entry>
  
  <entry>
    <title>【Arch Linux】使用 Wine 运行 Galgame</title>
    <link href="https://blog.tamako.work/techdev/arch/wine-galgame/"/>
    <id>https://blog.tamako.work/techdev/arch/wine-galgame/</id>
    <published>2022-08-24T16:03:09.000Z</published>
    <updated>2022-08-24T16:03:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在 Arch Linux 上通过 Wine 运行 Galgame 的主要步骤. 理论上对其他 Linux 发行版也可作类似操作.</p><p>需要注意的是, 以下教程<strong>很可能</strong>只对日文原版的 Galgame 有效. 考虑到中国大陆大量汉化 Galgame 存在”壳”, 标准的 Wine 配置可能无法应对, 需要据情况自行分析.</p><span id="more"></span><h2 id="Wine"><a href="#Wine" class="headerlink" title="Wine"></a>Wine</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>对 Wine 的简要介绍可参见<a href="https://en.wikipedia.org/wiki/Wine_(software)">维基百科</a>和 <a href="https://wiki.archlinux.org/title/wine">Arch Linux Wiki 同名词条</a>, 并非本文重点, 故不作赘述.</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Wine 的开发和 Staging (包含一些修复和补丁等) 分支位于官方包仓库的 <a href="https://wiki.archlinux.org/title/Official_repositories#multilib">Multilib</a> 仓库, Stable 分支位于 AUR. 以 Staging 分支为例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S wine-staging</span><br></pre></td></tr></table></figure><p>同时可能需要安装 32 位的图形和音频驱动, 分别参见 Arch Linux Wiki 的 <a href="https://wiki.archlinux.org/title/wine#Graphics_drivers">Wine#Graphics drivers</a> 和 <a href="https://wiki.archlinux.org/title/wine#Sound">Wine#Sound</a> 章节.</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>使用 <code>winecfg</code> 进行 Wine 相关的配置. 一般情况下不需要做改动.</p><p>对于启动系统 UI 缩放的设备, 可以在 Graphics 选项卡下的 Screen resolution 设置项下等比例设置 DPI, 例如默认值为 96 时, 150% 缩放等级对应的 DPI 为 144.</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wine notepad</span><br></pre></td></tr></table></figure><h2 id="字体和-locale"><a href="#字体和-locale" class="headerlink" title="字体和 locale"></a>字体和 locale</h2><p>对于 Wine 来说如上的设置已经可以启动很多应用程序了, 但对于日本生产的 Galgame 来说, 默认简体中文或英文的系统环境极有可能造成”乱码”. 因此我们还需要作一些额外的设置.</p><h3 id="日文字体"><a href="#日文字体" class="headerlink" title="日文字体"></a>日文字体</h3><p>一些教程<a href="http://brokendragontranslation.com/shift_jis_linux.html">^1</a>给出的解决方案是从系统语言为日本语的 Windows 系统中复制 <code>C:\Windows\Fonts</code> 文件夹中的字体, 不过 AUR 已经有人整理过日本语字体包:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S ttf-ms-win11-auto-japanese</span><br></pre></td></tr></table></figure><p>若出现字体安装失败的情况, 请参照<a href="/techdev/arch/localization-simplified-chinese/#ttf-ms-win11-auto-%E7%9B%B8%E5%85%B3%E5%8C%85%E6%97%A0%E6%95%88">此章节</a>.</p><h3 id="Shift-JIS-locale"><a href="#Shift-JIS-locale" class="headerlink" title="Shift-JIS locale"></a>Shift-JIS locale</h3><p>许多 Galgame 的开发 locale 使用的都是 Shift-JIS, 但其并不在大部分现代 Linux 发行版中内置. 需要另外安装.</p><p>参考<a href="http://brokendragontranslation.com/shift_jis_linux.html">此教程</a>, 下载作者提供的 <a href="https://mega.nz/#!KB413K5Y!anzW3tV-XYMinQZtWaMOlDaBE1cibls15DpAQH4tiHc">mega.nz</a> 或 <a href="https://drive.google.com/open?id=1X3pPqiks5-5Z2iMkDuPOVnAOAi_68rKW">Google Drive</a> 内的文件并按照要求解压后:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo localedef  -i ja_JP  -f SHIFT_JIS ja_JP.sjis --no-warnings=ascii</span><br><span class="line">sudo sed -i <span class="string">&#x27;/ja_JP.UTF-8 UTF-8/a ja_JP.SJIS SHIFT_JIS  &#x27;</span> /etc/locale.gen</span><br><span class="line"><span class="comment"># sudo locale-gen # 可能会失败, 但此时 locale 应已配置成功. 此时需要将上一行命令中新生成的一行数据删除或注释.</span></span><br></pre></td></tr></table></figure><p>此时再在终端中切换目录到 Galgame 目录下, 执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LC_ALL=ja_JP.sjis wine &lt;游戏可执行文件&gt;.exe</span><br></pre></td></tr></table></figure><p>同时可以尝试 ja_JP.utf8. 在 <code>/etc/locale.gen</code> 中找到 <code>#ja_JP.UTF-8 UTF-8</code> 一行, 删除前面的注释符后执行 <code>sudo locale-gen</code>, 再:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LC_ALL=ja_JP.utf8 wine &lt;游戏可执行文件&gt;.exe</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍在 Arch Linux 上通过 Wine 运行 Galgame 的主要步骤. 理论上对其他 Linux 发行版也可作类似操作.&lt;/p&gt;
&lt;p&gt;需要注意的是, 以下教程&lt;strong&gt;很可能&lt;/strong&gt;只对日文原版的 Galgame 有效. 考虑到中国大陆大量汉化 Galgame 存在”壳”, 标准的 Wine 配置可能无法应对, 需要据情况自行分析.&lt;/p&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    <category term="Tutorial" scheme="https://blog.tamako.work/categories/Essay/Tutorial/"/>
    
    
    <category term="Arch Linux" scheme="https://blog.tamako.work/tags/Arch-Linux/"/>
    
    <category term="Wine" scheme="https://blog.tamako.work/tags/Wine/"/>
    
    <category term="Galgame" scheme="https://blog.tamako.work/tags/Galgame/"/>
    
  </entry>
  
  <entry>
    <title>【Arch Linux】编译安装 AUR 上的 Linux 内核</title>
    <link href="https://blog.tamako.work/techdev/arch/kernel-compilation/"/>
    <id>https://blog.tamako.work/techdev/arch/kernel-compilation/</id>
    <published>2022-08-15T11:00:49.000Z</published>
    <updated>2022-08-15T11:00:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Arch Linux 可以使用多种 Linux 内核. 默认的内核由官方 <code>core</code> 仓库的 <code>linux</code> 包提供, 一般另附有 <code>linux-headers</code> 包. 官方仓库中提供的预编译内核还有同为 <code>core</code> 仓库的 <code>linux-lts</code> 和 <code>extra</code> 仓库的 <code>linux-zen</code>. 不过, 在一些场合下, 例如需要更新的或是有 patch 的内核时, 我们可能需要从 AUR 中获取需要的内核并手动编译安装. 本文以 <code>linux-mainline</code> 包为例, 主要借助 <code>yay</code> 更便捷地处理相关操作.</p><span id="more"></span><p>通常情况下, 只需要 <code>yay -S linux-mainline</code> 即可. 以下需要对编译安装过程做一些可选操作.</p><h2 id="获取-PKGBUILD"><a href="#获取-PKGBUILD" class="headerlink" title="获取 PKGBUILD"></a>获取 <code>PKGBUILD</code></h2><p>使用 <code>yay</code> 的 <code>-G</code> 选项仅获得 <code>PKGBUILD</code> 等相关的文件. 添加 <code>--force</code> 以强制保持与上游 AUR 包内容一致. 由于该操作默认目标文件夹为当前文件夹, 所以可以切换到 <code>~/.cache/yay</code> 后再获取.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.cache/yay &amp;&amp; <span class="built_in">cd</span> ~/.cache/yay</span><br><span class="line">yay -G --force linux-mainline</span><br></pre></td></tr></table></figure><h2 id="可选-修改上游仓库-URL"><a href="#可选-修改上游仓库-URL" class="headerlink" title="(可选) 修改上游仓库 URL"></a>(可选) 修改上游仓库 URL</h2><p>进入 <code>linux-mainline</code> 文件夹查看 <code>PKGBUILD</code> 后可以发现其从 &lt;kernel.org&gt; 的 Git 服务器获取上游的 Linux 源码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">source</span>=(</span><br><span class="line">  <span class="string">&quot;<span class="variable">$_srcname</span>::git+https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git#tag=<span class="variable">$_tag</span>&quot;</span></span><br><span class="line">  config         <span class="comment"># the main kernel config file</span></span><br><span class="line">)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>但是完整的 Linux 仓库体积已经超过 2 GB, 对于中国大陆用户不够友好. 好在 &lt;kernel.org&gt; 在北京已经设置 Git 镜像: <a href="https://kernel.source.codeaurora.cn/">https://kernel.source.codeaurora.cn/</a>. 所以我们可以修改上游仓库的 URL, 以提高下载速度. 在编辑器中打开 <code>PKGBUILD</code>:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">26c26</span><br><span class="line">&lt;   &quot;$_srcname::git+https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git#tag=$_tag&quot;</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&gt;   &quot;$_srcname::git+https://kernel.source.codeaurora.cn/pub/scm/linux/kernel/git/torvalds/linux.git#tag=$_tag&quot;</span><br></pre></td></tr></table></figure><p>或者是执行下面的命令修改:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/git+https\:\/\/git\.kernel\.org\/pub\/scm\/linux\/kernel\/git\/torvalds\/linux\.git/git+https:\/\/kernel.source.codeaurora.cn\/pub\/scm\/linux\/kernel\/git\/torvalds\/linux.git/&#x27;</span> PKGBUILD</span><br></pre></td></tr></table></figure><p>此外, 还可以通过 <code>yay</code> 的 <code>--editmenu</code> 参数交互式编辑:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S --editmenu linux-mainline</span><br></pre></td></tr></table></figure><h2 id="可选-获取-PGP-密钥"><a href="#可选-获取-PGP-密钥" class="headerlink" title="(可选) 获取 PGP 密钥"></a>(可选) 获取 PGP 密钥</h2><p>查看 <code>PKGBUILD</code> 可以看到用户需要接受三个 PGP 密钥, 分别是:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">validpgpkeys=(</span><br><span class="line">  <span class="string">&#x27;ABAF11C65A2970B130ABE3C479BE3E4300411886&#x27;</span>  <span class="comment"># Linus Torvalds</span></span><br><span class="line">  <span class="string">&#x27;647F28654894E3BD457199BE38DBBDC86092693E&#x27;</span>  <span class="comment"># Greg Kroah-Hartman</span></span><br><span class="line">  <span class="string">&#x27;A2FF3A36AAA56654109064AB19802F8B0D70FC30&#x27;</span>  <span class="comment"># Jan Alexander Steffens (heftig)</span></span><br><span class="line">)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>但是安装过程中可能发现 yay 卡在获取密钥的部分. 对于后两个密钥, 可以通过:<a href="https://github.com/Jguer/yay/issues/1022#issuecomment-538720089">^1</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://keys.openpgp.org --recv-keys 647F28654894E3BD457199BE38DBBDC86092693E</span><br><span class="line">gpg --keyserver hkp://keys.openpgp.org --recv-keys A2FF3A36AAA56654109064AB19802F8B0D70FC30</span><br></pre></td></tr></table></figure><p>获取.</p><p>这个选项可以持久化:<a href="https://github.com/Jguer/yay/issues/1022#issuecomment-538768636">^2</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -Y --gpgflags <span class="string">&quot;--keyserver hkp://keys.openpgp.org&quot;</span> --save</span><br></pre></td></tr></table></figure><p>不过对于第一个密钥, 可能需要其他的方法. 首先保证存在 <code>gpg2</code> (对应包为 <code>core</code> 仓库的 <code>gnupg</code>), 再:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg2 --auto-key-locate cert,pka,dane,wkd,keyserver --locate-keys torvalds@kernel.org</span><br></pre></td></tr></table></figure><h2 id="可选-多线程编译安装"><a href="#可选-多线程编译安装" class="headerlink" title="(可选) 多线程编译安装"></a>(可选) 多线程编译安装</h2><p>需要手动传入 <code>make</code> 命令的编译 flags:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAKEFLAGS=<span class="string">&quot;-j16&quot;</span> yay -S linux-mainline <span class="comment"># 16 线程</span></span><br></pre></td></tr></table></figure><p>多线程编译仍然可能需要较长时间 (笔者测试需要 30 分钟左右, 因机器配置而异). 请不要断电.</p><h2 id="更新-Boot-loader-配置"><a href="#更新-Boot-loader-配置" class="headerlink" title="更新 Boot loader 配置"></a>更新 Boot loader 配置</h2><p>以 GRUB 为例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>这是非常重要的 - 否则折腾半天系统服务没法加载的时候会很痛苦.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;Arch Linux 可以使用多种 Linux 内核. 默认的内核由官方 &lt;code&gt;core&lt;/code&gt; 仓库的 &lt;code&gt;linux&lt;/code&gt; 包提供, 一般另附有 &lt;code&gt;linux-headers&lt;/code&gt; 包. 官方仓库中提供的预编译内核还有同为 &lt;code&gt;core&lt;/code&gt; 仓库的 &lt;code&gt;linux-lts&lt;/code&gt; 和 &lt;code&gt;extra&lt;/code&gt; 仓库的 &lt;code&gt;linux-zen&lt;/code&gt;. 不过, 在一些场合下, 例如需要更新的或是有 patch 的内核时, 我们可能需要从 AUR 中获取需要的内核并手动编译安装. 本文以 &lt;code&gt;linux-mainline&lt;/code&gt; 包为例, 主要借助 &lt;code&gt;yay&lt;/code&gt; 更便捷地处理相关操作.&lt;/p&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    <category term="Tutorial" scheme="https://blog.tamako.work/categories/Essay/Tutorial/"/>
    
    
    <category term="Arch Linux" scheme="https://blog.tamako.work/tags/Arch-Linux/"/>
    
    <category term="Operating System" scheme="https://blog.tamako.work/tags/Operating-System/"/>
    
    <category term="Kernel" scheme="https://blog.tamako.work/tags/Kernel/"/>
    
    <category term="AUR" scheme="https://blog.tamako.work/tags/AUR/"/>
    
    <category term="Compilation" scheme="https://blog.tamako.work/tags/Compilation/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1399D: Binary String to Subsequences</title>
    <link href="https://blog.tamako.work/acmoi/codeforces/1399d/"/>
    <id>https://blog.tamako.work/acmoi/codeforces/1399d/</id>
    <published>2022-08-01T16:39:59.000Z</published>
    <updated>2022-08-02T00:45:19.018Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/problemset/problem/1399/D">Codeforces 1399D</a> C++ 一解.</p></blockquote><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本题本身的思路是很清晰的, 但考虑到一些极端数据, 需要额外添加一些数据结构.</p><p>可以确定的是, 给定的字符串的每个字符都要纳入某一个子序列中. 同时可以注意到, 如果已经存在一些子序列, 对于源串的某个字符, 只要其能接在某个子序列之后, 就不会增加现有子序列的数量; 若这个字符无法接在任何现有子序列之后, 拆开其中一部分子序列使其能够纳入也不会使子序列数量减少. 因此这种策略是最优的.</p><p>本题给定的数据规模 $\sum n\leq2\times10^5$. 若每次尝试添加字符到子序列时都顺序搜索现有子序列, 部分测试点无法通过 (例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">200000</span><br><span class="line">111111111111... (200000 个 1)</span><br></pre></td></tr></table></figure><p>). 因此可以设置两个栈结构用于存储现有的 “尾数” 为 0 和 1 的子序列的序号. 因为只需要构造出一种可行的组合子序列的方案即可, 只需要对栈作入栈, 出栈操作, 其时间开销可以接受.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">change_bit</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == <span class="string">&#x27;1&#x27;</span> ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change_bit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_bit</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_and_print</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.<span class="built_in">length</span>(), total = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n, <span class="number">0</span>)</span>, stack[2]</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c = <span class="built_in">change_bit</span>(s[i]);</span><br><span class="line">        <span class="keyword">int</span> x = <span class="built_in">get_bit</span>(c), y = <span class="built_in">get_bit</span>(s[i]);</span><br><span class="line">        <span class="keyword">if</span> (stack[x].<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            ++total;</span><br><span class="line">            ans[i] = total;</span><br><span class="line">            stack[y].<span class="built_in">push_back</span>(total - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = stack[x].<span class="built_in">back</span>();</span><br><span class="line">            stack[x].<span class="built_in">pop_back</span>();</span><br><span class="line">            stack[y].<span class="built_in">push_back</span>(j);</span><br><span class="line">            ans[i] = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; total &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line">    string s;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">        <span class="built_in">solve_and_print</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1399/D&quot;&gt;Codeforces 1399D&lt;/a&gt; C++ 一解.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
    <category term="Programming" scheme="https://blog.tamako.work/tags/Programming/"/>
    
    <category term="C++" scheme="https://blog.tamako.work/tags/C/"/>
    
    <category term="Codeforces" scheme="https://blog.tamako.work/tags/Codeforces/"/>
    
    <category term="Solution" scheme="https://blog.tamako.work/tags/Solution/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1368B: Codeforces Subsequences</title>
    <link href="https://blog.tamako.work/acmoi/codeforces/1368b/"/>
    <id>https://blog.tamako.work/acmoi/codeforces/1368b/</id>
    <published>2022-08-01T10:25:06.000Z</published>
    <updated>2022-08-01T14:08:08.080Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/problemset/problem/1368/B">Codeforces 1368B</a> C++ 和 Python 一解.</p></blockquote><span id="more"></span><blockquote><p>终于看到一道比较有趣的 constructive algorithm 的题目了.</p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本题是 “乘法原理” 的经典应用之一: 每一个内容为 <code>codeforces</code> 子序列都需要在源串中各选择十个字符连续重复的字符串 (指连续的 <code>c</code>, <code>o</code>, <code>d</code> 等十个字符串) 中的一个字符. 若假定源串 $s$ 中 <code>c</code>, <code>o</code>, <code>d</code> 等字符各连续重复 $a_0,a_1,a_2,\cdots,a_9$ 次, 则最终能生成的 <code>codeforces</code> 子序列共有 $l=a_0a_1a_2\cdots a_9$ 个. 而为满足题意, 需要选择合适的 $a_0,a_1,a_2,\cdots,a_9$, 使得 $l\geq k$ 且 $L=a_0+a_1+a_2+\cdots+a_9$ 尽可能小.</p><h3 id="一种贪心的策略"><a href="#一种贪心的策略" class="headerlink" title="一种贪心的策略"></a>一种贪心的策略</h3><p>我们知道, 根据均值不等式, 对于长度为 $n$ 的正有限实数列 ${a_i}$, 有</p><p>$$<br>\sqrt[n]{\prod^{n}<em>{i=1}{a_i}}\leq\sum^{n}</em>{i=1}{a_i},<br>$$</p><p>当且仅当 ${a_i}$ 是常数列时取等号. 对于本题, 可以猜想: 当左式恒定, 即 $l$ 恒定时, 若要使右式 (也即 $L$) 尽可能小, 则需要选择相差不大的 $a_i(i=0,1,\cdots,9)$. 这即是一种贪心策略.</p><p>我们希望 $a_i$ 的极差尽可能小, 一种选择方法是令其中一部分 $a_i$ 比另一部分恰好大 $1$ (当然理想情况是这些 $a_i$ 都相等). 不妨假设 $a_0,a_1,\cdots,a_{m-1}$ ($m=0,1,\cdots,10$, 当 $m=0$ 时规定 $a_i=a$, 当 $m=10$ 时规定 $a_i=a+1$) 都等于 $a+1(a\in\mathbb{N}^{*})$, $a_m,a_{m+1},\cdots,a_9$ 都等于 $a$. 那么</p><p>$$<br>l=(a+1)^{10-m}a^m,\<br>L=(10-m)(a+1)+ma=10a-m+10.<br>$$</p><h3 id="a-和-m-的确定"><a href="#a-和-m-的确定" class="headerlink" title="$a$ 和 $m$ 的确定"></a>$a$ 和 $m$ 的确定</h3><p>首先我们关注 $m=10$ 即 $l=a^{10}$ 的情况. 注意到此时若要使 $l\geq k$, 则 $a\geq\sqrt[10]{k}$.</p><p>而当 $a$ 固定时, 对于不同的 $m$, 有 $\sup l=(a+1)^{10}$, $\inf l=a^{10}$, 且考虑到当 $a_p&gt;a_q$ 时恒有 $\left.L\right|<em>{a=a_p}\geq\left.L\right|</em>{a=a_q}$, 则 $a$ 可以选取 $\lfloor\sqrt[10]{k}\rfloor$.</p><p>对于 $m$, 理论上根据 $l\geq k$ 可以推导得到 $m\leq\dfrac{10\ln(a+1)-\ln k}{\ln(a+1)-\ln a}$, 但在实际编程中考虑到浮点数存在的误差 (直接用此式计算无法通过 Codeforces 测试集), 我们需要利用大整数 (<code>long long unsigned</code> 足够) 从 $m=0$ 或 $m=10$ 开始逐个测试 (理论上也可以使用二分查找, 但本题的数据规模下不必要), 直到找到符合要求的 $m$. 为方便起见, 确定 $a$ 的过程依然使用了对数法, 同时为尽可能保证计算准确, 代码中使用了自定义的下取整函数 <code>better_floor()</code>.</p><p>在 Python 中, 考虑到其原生支持处理超长整数, 对上述推导公式修改为 $k(a+1)^m\leq a^m(a+1)^{10}$, 同样可以达到题意所需要求, 而这式两边即对应下述代码中的 <code>left</code> 和 <code>right</code>.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS (1e-14)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> string <span class="title">base</span><span class="params">(<span class="string">&quot;codeforces&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">better_floor</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> y = <span class="built_in">ceil</span>(x);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (y - x &lt; EPS ? y : <span class="built_in">floor</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc_m</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">unsigned</span> k, <span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">unsigned</span> l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        l *= a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; k &amp;&amp; m-- &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        l = l * (a + <span class="number">1</span>) / a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">unsigned</span> k;</span><br><span class="line">    <span class="keyword">int</span> a, m;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in"><span class="keyword">int</span></span>(<span class="built_in">better_floor</span>(<span class="built_in">pow</span>(k, <span class="number">0.1</span>)));</span><br><span class="line">    m = <span class="built_in">calc_m</span>(k, a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> - m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">string</span>(a + <span class="number">1</span>, base[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span> - m; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">string</span>(a, base[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_m3</span>(<span class="params">k, a</span>):</span></span><br><span class="line">    left, right = k, (a + <span class="number">1</span>) ** <span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">12</span>):</span><br><span class="line">        left *= a + <span class="number">1</span></span><br><span class="line">        right *= a</span><br><span class="line">        <span class="keyword">if</span> left &gt; right:</span><br><span class="line">            <span class="keyword">return</span> i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">k = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">base = <span class="string">&#x27;codeforces&#x27;</span></span><br><span class="line">a = <span class="built_in">int</span>(k ** <span class="number">0.1</span>)</span><br><span class="line">m = calc_m3(k, a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span> - m):</span><br><span class="line">    <span class="built_in">print</span>(base[i] * (a + <span class="number">1</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span> - m, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(base[i] * a, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1368/B&quot;&gt;Codeforces 1368B&lt;/a&gt; C++ 和 Python 一解.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
    <category term="Programming" scheme="https://blog.tamako.work/tags/Programming/"/>
    
    <category term="Python" scheme="https://blog.tamako.work/tags/Python/"/>
    
    <category term="C++" scheme="https://blog.tamako.work/tags/C/"/>
    
    <category term="Codeforces" scheme="https://blog.tamako.work/tags/Codeforces/"/>
    
    <category term="Solution" scheme="https://blog.tamako.work/tags/Solution/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1430C: Numbers on Whiteboard</title>
    <link href="https://blog.tamako.work/acmoi/codeforces/1430c/"/>
    <id>https://blog.tamako.work/acmoi/codeforces/1430c/</id>
    <published>2022-07-31T02:39:03.000Z</published>
    <updated>2022-07-31T02:49:50.473Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/problemset/problem/1430/C">Codeforces 1430C</a> C++ 一解.</p></blockquote><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>白板上的数字初始状态是固定的 $1,2,\cdots,n$. 每次操作都会 “折损” 当下所有数字之和, 而 “折损” 的量即为选定的两个数之和的一半. 因此为使最后得到的数字最小, 一种贪心的方法是每次选择最大的两个数字做操作.</p><p>操作时对于两数之和为奇数的, 得到的新数字需要向上取整. 虽然有 “凭空” 增大数字总和的可能性, 但经过数学归纳即可得知最后一次操作选定的数字一定是 $1$ 和 $3$ $(n&gt;2)$ 或 $1$ 和 $2$ $(n=2)$, 也即最后得到的数字为 $2$. 显然若要得到小于 $2$ 的数字, 需要在倒数第二次操作时白板上只剩下两个 $1$, 而这在向上取整的规则下是做不到的. 因此这种贪心方法即为最优解.</p><h3 id="空间和时间优化"><a href="#空间和时间优化" class="headerlink" title="空间和时间优化"></a>空间和时间优化</h3><p>因为白板数字的初始状态是规律性的连续自然数列, 选定数字的过程也极为规律, 无需要实际使用栈等数据结构模拟. 官方<a href="https://codeforces.com/blog/entry/83614">题解</a>则提供了使用实际数据结构 <code>vector&lt;int&gt;</code> 的方法.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solveAndPrint</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; n - <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; n - i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n - i + <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="built_in">solveAndPrint</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1430/C&quot;&gt;Codeforces 1430C&lt;/a&gt; C++ 一解.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
    <category term="Programming" scheme="https://blog.tamako.work/tags/Programming/"/>
    
    <category term="C++" scheme="https://blog.tamako.work/tags/C/"/>
    
    <category term="Codeforces" scheme="https://blog.tamako.work/tags/Codeforces/"/>
    
    <category term="Solution" scheme="https://blog.tamako.work/tags/Solution/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1419D1: Sage&#39;s Birthday (easy version)</title>
    <link href="https://blog.tamako.work/acmoi/codeforces/1419d1/"/>
    <id>https://blog.tamako.work/acmoi/codeforces/1419d1/</id>
    <published>2022-07-30T16:40:20.000Z</published>
    <updated>2022-07-30T16:44:38.999Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/problemset/problem/1419/D1">Codeforces 1419D1</a> C++ 一解.</p></blockquote><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本题是简单版本, 各个冰淇淋球的价格都不相同. 我们只需要构造出数量最多的 “谷” 即可. 与上篇 <a href="https://blog.imakiseki.cf/acmoi/codeforces/1312b/">Codeforces 1312B: Bogosort</a> 类似, 这次相当于对一个排序后的数组同时从两边取数输出, 例如对输入数据 $[7,6,5,4,3,2,1]$, 两边取数得到 $[7,1,6,2,5,3,4]$, 这样得到的新数列的 “谷” 数量最多, 且为 $\left[\dfrac{n-1}{2}\right]$.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, p = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; (n - <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">sort</span>(a, a + n);</span><br><span class="line">    <span class="keyword">while</span> (p++ &lt; n / <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a[n - p] &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a[p - <span class="number">1</span>] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a[p - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1419/D1&quot;&gt;Codeforces 1419D1&lt;/a&gt; C++ 一解.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
    <category term="Programming" scheme="https://blog.tamako.work/tags/Programming/"/>
    
    <category term="C++" scheme="https://blog.tamako.work/tags/C/"/>
    
    <category term="Codeforces" scheme="https://blog.tamako.work/tags/Codeforces/"/>
    
    <category term="Solution" scheme="https://blog.tamako.work/tags/Solution/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1312B: Bogosort</title>
    <link href="https://blog.tamako.work/acmoi/codeforces/1312b/"/>
    <id>https://blog.tamako.work/acmoi/codeforces/1312b/</id>
    <published>2022-07-30T15:21:16.000Z</published>
    <updated>2022-07-30T15:53:25.407Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/problemset/problem/1312/B">Codeforces 1312B</a> C++ 一解.</p></blockquote><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>此题相当于排序数组后使两个有限数列 (一个是数列 ${1,2,\cdots,n}$, 一个是排序后的数组 $a_\mathrm{sorted}$) 的差各不相同. 一个很容易想到的构造方法是对一个单调 (不一定严格) 递减数列与严格单调递增数列求差, 这样得到的差数列的各元素一定各不相同 (且是单调递减的).</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n, a[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(a, a + n); <span class="comment">// 先递增排列</span></span><br><span class="line">        <span class="keyword">while</span> (n--)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; a[n] &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 再倒序输出, 相当于 &quot;构造&quot; 出了递减数列</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1312/B&quot;&gt;Codeforces 1312B&lt;/a&gt; C++ 一解.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
    <category term="Programming" scheme="https://blog.tamako.work/tags/Programming/"/>
    
    <category term="C++" scheme="https://blog.tamako.work/tags/C/"/>
    
    <category term="Codeforces" scheme="https://blog.tamako.work/tags/Codeforces/"/>
    
    <category term="Solution" scheme="https://blog.tamako.work/tags/Solution/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1474B: Different Divisors</title>
    <link href="https://blog.tamako.work/acmoi/codeforces/1474b/"/>
    <id>https://blog.tamako.work/acmoi/codeforces/1474b/</id>
    <published>2022-07-30T03:14:01.000Z</published>
    <updated>2022-07-30T03:56:54.024Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/problemset/problem/1474/B">Codeforces 1474B</a> C++ 一解.</p></blockquote><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>$a$ 至少要有 $4$ 个因子 (自然包括 $1$ 和 $a$ 本身), 且任意两因子的差不小于 $d$. 为使 $a$ 尽可能小, 我们只希望 $a$ 有且仅有 $4$ 个因子, 也就是再确定两个不同的质因子 $p,q$ ($a=pq$, 且不妨设 $p&lt;q$).</p><p>一个很显然的事实是: 对于充分大的 $d$, 我们越能保证 $a-q\geq d$ (不会证明故从略), 因此我们只需要在质数表中找到不小于 $1+d$ ($1$ 即是因子升序排列的第一个因子) 的 $p$ (第二个因子) 和不小于 $p+d$ 的 $q$ (第三个因子), 再确保 $a$ (第四个因子) 与 $q$ 的差不小于 $d$ 即可. 经过验证, 对于 $d=1$ 依然有 $a-q\geq d$.</p><h3 id="生成质数表"><a href="#生成质数表" class="headerlink" title="生成质数表"></a>生成质数表</h3><p>生成质数表的方式有很多. 以下代码中尝试利用 STL 的 <code>vector&lt;int&gt;</code> 动态生成/更新指定范围内的质数表. 当然考虑到 $d\leq 10,000$, 可以直接生成完整长度 (所需的最大质数为 $20,011$, 根据质数定理估计质数表长度为 $2020$) 的质数表.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_PRIME (20011) <span class="comment">// 10007 and 20011 are primes.</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="built_in"><span class="keyword">int</span></span>(<span class="built_in">floor</span>(<span class="built_in">sqrt</span>(x))); i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">updatePrimes</span><span class="params">(<span class="keyword">int</span> maxn, vector&lt;<span class="keyword">int</span>&gt; primes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lastPrime = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (primes.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        lastPrime = primes.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        primes.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lastPrime + (lastPrime == <span class="number">2</span> ? <span class="number">1</span> : <span class="number">2</span>); i &lt;= maxn; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isPrime</span>(i))</span><br><span class="line">        &#123;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> primes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">updatePrimes</span><span class="params">(<span class="keyword">int</span> maxn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">updatePrimes</span>(maxn, vector&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> d, vector&lt;<span class="keyword">int</span>&gt; primes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator index1 = <span class="built_in">lower_bound</span>(primes.<span class="built_in">begin</span>(), primes.<span class="built_in">end</span>(), <span class="number">1</span> + d);</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator index2 = <span class="built_in">lower_bound</span>(primes.<span class="built_in">begin</span>(), primes.<span class="built_in">end</span>(), *index1 + d);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *index1 * *index2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, d;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; primes = <span class="built_in">updatePrimes</span>(MAX_PRIME);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; d;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">solve</span>(d, primes) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1474/B&quot;&gt;Codeforces 1474B&lt;/a&gt; C++ 一解.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
    <category term="Programming" scheme="https://blog.tamako.work/tags/Programming/"/>
    
    <category term="C++" scheme="https://blog.tamako.work/tags/C/"/>
    
    <category term="Codeforces" scheme="https://blog.tamako.work/tags/Codeforces/"/>
    
    <category term="Solution" scheme="https://blog.tamako.work/tags/Solution/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 766A: Mahmoud and Longest Uncommon Subsequence</title>
    <link href="https://blog.tamako.work/acmoi/codeforces/766a/"/>
    <id>https://blog.tamako.work/acmoi/codeforces/766a/</id>
    <published>2022-07-30T00:52:37.000Z</published>
    <updated>2022-07-30T01:03:13.140Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/problemset/problem/766/A">Codeforces 766A</a> C++ 一解.</p></blockquote><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>两个字符串的最长不公共子序列被定义为最长的仅为其中一个字符串的子序列的字符串.</p><p>对于两个长度不相同的字符串 (不妨设 $a,b$ 且 $a$ 的长度较长), 一个非常直观的想法是: 因为一个字符串的子序列的长度必须不大于该串的长度, 只要选取 $a$ 本身作为所求的子序列, 其肯定是 $a$ 的子序列, 而不是 $b$ 的子序列.</p><p>而对于长度相同的情况, 我们同样可以使用类似的思路: 若两个串不相同, 我们总能选择其中一个串本身作为所求的子序列, 这样其一定不会是另一个串的子序列; 若两个串完全相同, 此时我们就无法找到一个串 (根据题意, 包括空串) 作为所求的子序列, 只能输出 $-1$.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a == b)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">max</span>(a.<span class="built_in">length</span>(), b.<span class="built_in">length</span>()) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/766/A&quot;&gt;Codeforces 766A&lt;/a&gt; C++ 一解.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces 1520C: Not Adjacent Matrix</title>
    <link href="https://blog.tamako.work/acmoi/codeforces/1520c/"/>
    <id>https://blog.tamako.work/acmoi/codeforces/1520c/</id>
    <published>2022-07-28T11:23:45.000Z</published>
    <updated>2022-07-28T11:39:43.700Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/problemset/problem/1520/C">Codeforces 1520C</a> C++ 一解.</p></blockquote><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>只要求对 $n$ 阶方阵依次填充 $1,2,\cdots,n^2$, 一种常见的思考模式是依次将这个自然数序列填充到正确的位置. 显然对于本题一个较好的方案是间隔填充: 先从元素 $(0,0)$ (假定方阵左上角元素坐标为此, 其他类推) 开始每次间隔一格填充直至一行填充完毕, 再跳转到下一行间隔填充直至右下角元素 $(n-1,n-1)$, 接着顺序填充剩下的元素. 这样就能满足题意.</p><p>Codeforces 上<a href="https://codeforces.com/blog/entry/90342">编辑者博客</a>中, <a href="https://codeforces.com/profile/MikeMirzayanov">MikeMirzayazov</a> 用黑白棋盘举例, 先填充白格再填充黑格, 判定颜色依据为横纵坐标之和的奇偶性. 而以下的代码则直接将方阵拉长为长度为 $n$ 的一维数组, 直接根据下标的奇偶性填充数字, 效果类似. 当然以下的代码推出了每个坐标对应的数值的解析式, 并未利用到数组空间.</p><p>同时, 利用这样的填充方案, 显然可以得知当且仅当 $n=2$ 时找不到满足题意的方阵; 为方便编程, 这里将 $n=1$ 也做了特殊处理.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solveAndPrint</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> nn = n * n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nn; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; (nn + i) / <span class="number">2</span> + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; i / <span class="number">2</span> + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((i + <span class="number">1</span>) % n == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nn; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; (nn + i + <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; i / <span class="number">2</span> + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((i + <span class="number">1</span>) % n == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="built_in">solveAndPrint</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1520/C&quot;&gt;Codeforces 1520C&lt;/a&gt; C++ 一解.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
    <category term="Programming" scheme="https://blog.tamako.work/tags/Programming/"/>
    
    <category term="C++" scheme="https://blog.tamako.work/tags/C/"/>
    
    <category term="Codeforces" scheme="https://blog.tamako.work/tags/Codeforces/"/>
    
    <category term="Solution" scheme="https://blog.tamako.work/tags/Solution/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 266B: Queue at the School</title>
    <link href="https://blog.tamako.work/acmoi/codeforces/266b/"/>
    <id>https://blog.tamako.work/acmoi/codeforces/266b/</id>
    <published>2022-07-26T14:57:22.000Z</published>
    <updated>2022-08-15T14:43:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/problemset/problem/266/B">Codeforces 266B</a> C++ 一解。</p></blockquote><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>简单的模拟。把 B 想象成箱子，要不断往右侧推。</p><p>需要注意的是，没有正确理解题意的话容易理解成每次让箱子统一右移一格。但实际上，遇到 <code>BBG</code> 的情况，下一秒应该是 <code>BGB</code> 而不是 <code>GBB</code>，因为某一时刻某两个相邻位置的 B 和 G 互换后，就只能考虑其后的位置了。再拿箱子举例，应该想象成连续的箱子无法推动，只能推动箱子“队列”的最末一个。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// brute force</span></span><br><span class="line"><span class="function">string <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> t, string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = s.<span class="built_in">length</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; l - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">&#x27;B&#x27;</span> &amp;&amp; s[j + <span class="number">1</span>] == <span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s[j] = <span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">                s[j + <span class="number">1</span>] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">                j += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, t;</span><br><span class="line">    string s, a;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; t;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">solve</span>(n, t, s);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/266/B&quot;&gt;Codeforces 266B&lt;/a&gt; C++ 一解。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
    <category term="Programming" scheme="https://blog.tamako.work/tags/Programming/"/>
    
    <category term="C++" scheme="https://blog.tamako.work/tags/C/"/>
    
    <category term="Codeforces" scheme="https://blog.tamako.work/tags/Codeforces/"/>
    
    <category term="Solution" scheme="https://blog.tamako.work/tags/Solution/"/>
    
  </entry>
  
  <entry>
    <title>【Arch Linux】本地化：简体中文</title>
    <link href="https://blog.tamako.work/techdev/arch/localization-simplified-chinese/"/>
    <id>https://blog.tamako.work/techdev/arch/localization-simplified-chinese/</id>
    <published>2022-07-13T14:26:58.000Z</published>
    <updated>2022-07-13T18:14:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍 Arch Linux 本地化为简体中文的操作。</p><p>本文的测试环境是 KDE Plasma + SDDM + Wayland。考虑到 Xorg 教程较多，且大部分操作通用，本文会存在 Xorg 和 Wayland 混合描述的情况。</p><span id="more"></span><h2 id="必要配置"><a href="#必要配置" class="headerlink" title="必要配置"></a>必要配置</h2><p>不建议用户日常使用 root 帐户，则此时用户的当前帐户建议拥有 sudo 权限。安装 <code>sudo</code> 包。</p><p>同时部分本地化安装包在 AUR 源中，建议用户安装 AUR helper。本文以 <code>yay</code> 为例。</p><h2 id="生成语言环境-1"><a href="#生成语言环境-1" class="headerlink" title="生成语言环境^1"></a>生成语言环境<a href="https://wiki.archlinux.org/title/Localization/Simplified_Chinese#locale_settings">^1</a></h2><p>编辑 <code>/etc/locale.gen</code>，找到 <code>#en_US.UTF-8 UTF-8</code> 和 <code>#zh_CN.UTF-8 UTF-8</code>，删除前面的注释符号“#”。</p><p>再生成语言环境文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo locale-gen</span><br></pre></td></tr></table></figure><p>为保证大部分程序和终端环境显示正常，在 <code>/etc/locale.conf</code> 中设置 <code>LANG</code> 环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><h3 id="（可选）为-Xorg-图形界面设置中文语言环境"><a href="#（可选）为-Xorg-图形界面设置中文语言环境" class="headerlink" title="（可选）为 Xorg 图形界面设置中文语言环境"></a>（可选）为 Xorg 图形界面设置中文语言环境</h3><p>编辑 <code>~/.xinitrc</code> 或 <code>~/.xprofile</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br><span class="line"><span class="built_in">export</span> LANGUAGE=zh_CN:en_US</span><br></pre></td></tr></table></figure><h2 id="显示简体中文字体"><a href="#显示简体中文字体" class="headerlink" title="显示简体中文字体"></a>显示简体中文字体</h2><p>此时图形界面的中文显示一般是异常的。这可以通过安装相关字体解决。</p><h3 id="安装字体-2"><a href="#安装字体-2" class="headerlink" title="安装字体^2"></a>安装字体<a href="https://wiki.archlinux.org/title/Localization/Simplified_Chinese#Install_fonts">^2</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S wqy-microhei wqy-microhei-lite wqy-bitmapfont wqy-zenhei ttf-arphic-ukai ttf-arphic-uming adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts noto-fonts-cjk</span><br></pre></td></tr></table></figure><p>可选 AUR 源中 <code>ttf-ms-win11-auto-*</code> 相关的包（存在已知问题，见<a href="#ttf-ms-win11-auto--%E7%9B%B8%E5%85%B3%E5%8C%85%E6%97%A0%E6%95%88">下文</a>）。</p><p>一般此时字体缓存已刷新。若无：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure><p>可以通过类似下述命令验证字体缓存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-match -s | grep <span class="string">&#x27;Noto Sans CJK&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="ttf-ms-win11-auto-相关包无效"><a href="#ttf-ms-win11-auto-相关包无效" class="headerlink" title="ttf-ms-win11-auto-* 相关包无效"></a><code>ttf-ms-win11-auto-*</code> 相关包无效</h4><p>参见 <code>ttf-ms-win11-auto</code> AUR 包<a href="https://aur.archlinux.org/packages/ttf-ms-win11-auto">详情页面</a>下的<a href="https://aur.archlinux.org/packages/ttf-ms-win11-auto#comment-873004">评论</a>：</p><blockquote><p>It still throws <code>ln: failed to create symbolic link &#39;/home/&lt;User&gt;/.cache/yay/ttf-ms-win11-auto/src/&#39; -&gt; &#39;&#39;: No such file or directory</code> warnings when I install the package via yay. Manually copy/move the font files from <code>~/.cache/yay/ttf-ms-win11-auto/src</code> to <code>/usr/share/fonts</code> and <code>fc-cache -fv</code> can solve the problem.</p></blockquote><p>因此，读者只需查看 AUR 包的缓存（如 <code>~/.cache/yay/ttf-ms-win11-auto</code>），找到其中的字体文件，或是解压其中的压缩包（如 <code>ttf-ms-win11-auto-zh_cn-10.0.22000.318-2-any.pkg.tar.zst</code>）得到字体文件，将其复制到 <code>/usr/share/fonts</code> 并重新生成字体缓存即可。</p><h3 id="修复简体中文字符显示为日文的问题-3"><a href="#修复简体中文字符显示为日文的问题-3" class="headerlink" title="修复简体中文字符显示为日文的问题^3"></a>修复简体中文字符显示为日文的问题<a href="https://wiki.archlinux.org/title/Localization/Simplified_Chinese#Fixed_Simplified_Chinese_display_as_a_variant_(Japanese)_glyph">^3</a></h3><p>新建文件 <code>/etc/fonts/conf.avail/64-language-selector-prefer.conf</code>：</p><p>若安装 <a href="https://archlinux.org/packages/?name=noto-fonts-cjk">noto-fonts-cjk</a> 包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">fontconfig</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;fonts.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fontconfig</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">family</span>&gt;</span>serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Serif CJK SC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Serif CJK TC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Serif CJK JP<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">family</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans CJK SC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans CJK TC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans CJK JP<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">family</span>&gt;</span>monospace<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans Mono CJK SC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans Mono CJK TC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Noto Sans Mono CJK JP<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fontconfig</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若安装 <a href="https://archlinux.org/packages/?name=adobe-source-han-sans-otc-fonts">adobe-source-han-sans-otc-fonts</a> 包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">fontconfig</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;fonts.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fontconfig</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">family</span>&gt;</span>serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Source Han Serif SC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Source Han Serif TC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Source Han Serif HW<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Source Han Serif K<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">family</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Source Han Sans SC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Source Han Sans TC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Source Han Sans HW<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Source Han Sans K<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">family</span>&gt;</span>monospace<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Source Han Sans SC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Source Han Sans TC<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Source Han Sans HW<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Source Han Sans K<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fontconfig</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后新建软链接应用配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/fonts/conf.avail/64-language-selector-prefer.conf /etc/fonts/conf.d/64-language-selector-prefer.conf</span><br></pre></td></tr></table></figure><p>随后刷新字体缓存生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure><h2 id="中文输入法"><a href="#中文输入法" class="headerlink" title="中文输入法"></a>中文输入法</h2><p>本文使用 Fcitx 5 框架配套 Rime 输入法引擎和 Clover Pinyin（四叶草拼音）输入方案。</p><h3 id="Fcitx-5"><a href="#Fcitx-5" class="headerlink" title="Fcitx 5"></a>Fcitx 5</h3><h4 id="安装-4"><a href="#安装-4" class="headerlink" title="安装^4"></a>安装<a href="https://wiki.archlinux.org/title/Fcitx5#Installation">^4</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5 fcitx5-qt fcitx5-gtk fcitx5-configtool</span><br></pre></td></tr></table></figure><p>在 Xorg 环境下，编辑 <code>~/.xprofile</code>：<a href="https://wiki.archlinux.org/title/Fcitx5#Integration">^5</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx5</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx5</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">&quot;@im=fcitx5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LANG=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br><span class="line"><span class="built_in">export</span> LC_CTYPE=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br></pre></td></tr></table></figure><p>在 Wayland 环境下，编辑 <code>/etc/environment</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=<span class="string">&quot;@im=fcitx&quot;</span></span><br></pre></td></tr></table></figure><p>注销会话或重启。</p><h4 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h4><p>本文使用 <a href="https://github.com/hosxy/Fcitx5-Material-Color">Material Color</a> 皮肤。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-material-color</span><br></pre></td></tr></table></figure><p>再编辑 Fcitx 5 的配置文件 <code>~/.config/fcitx5/conf/classicui.conf</code>：<a href="https://github.com/hosxy/Fcitx5-Material-Color/blob/master/README.md#%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85">^6</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 垂直候选列表</span></span><br><span class="line">Vertical Candidate List=False</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按屏幕 DPI 使用</span></span><br><span class="line">PerScreenDPI=True</span><br><span class="line"></span><br><span class="line"><span class="comment"># Font (设置成你喜欢的字体)</span></span><br><span class="line">Font=<span class="string">&quot;思源黑体 CN Medium 13&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题</span></span><br><span class="line">Theme=Material-Color-Pink</span><br></pre></td></tr></table></figure><h4 id="诊断工具"><a href="#诊断工具" class="headerlink" title="诊断工具"></a>诊断工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcitx5-diagnose</span><br></pre></td></tr></table></figure><h3 id="Rime"><a href="#Rime" class="headerlink" title="Rime"></a><a href="https://rime.im/">Rime</a></h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-rime</span><br></pre></td></tr></table></figure><p>重启 Fcitx 5。依次 System Settings -&gt; Regional Settings -&gt; Input Method -&gt; Add Input Method… -&gt; Only Show Current Language [Uncheck] -&gt; Rime（中州韻）来激活输入法。</p><p><strong>注意</strong>：Rime 系统目录位于 <code>/usr/share/rime-data</code>。本地目录 <code>~/.local/share/fcitx5/rime</code> 可以覆盖前者的配置。</p><h4 id="单行模式"><a href="#单行模式" class="headerlink" title="单行模式"></a>单行模式</h4><p>单行模式类似于 Windows 10 中微软拼音的默认行为：输入的拼音序列能同时键入到文本中，待选定候选词后才将其替换为对应的词。</p><p>编辑 <code>~/.config/fcitx5/conf/rime.conf</code>：<a href="https://github.com/hosxy/Fcitx5-Material-Color/blob/master/README.md#%E5%8D%95%E8%A1%8C%E6%A8%A1%E5%BC%8F-inline-preedit">^7</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可用时在应用程序中显示预编辑文本（开启单行模式）</span></span><br><span class="line">PreeditInApplication=True</span><br></pre></td></tr></table></figure><h3 id="Clover-Pinyin"><a href="#Clover-Pinyin" class="headerlink" title="Clover Pinyin"></a>Clover Pinyin</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S rime-cloverpinyin</span><br></pre></td></tr></table></figure><p>编辑 <code>~/.local/share/fcitx5/rime/default.custom.yaml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">patch:</span></span><br><span class="line">  <span class="comment"># 每页候选词个数</span></span><br><span class="line">  <span class="attr">&quot;menu/page_size&quot;:</span> <span class="number">9</span></span><br><span class="line">  <span class="attr">schema_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">schema:</span> <span class="string">clover</span></span><br></pre></td></tr></table></figure><p>重启 Fcitx 5。</p><p><strong>注意</strong>：Clover Pinyin 有关快捷键等配置位于 <code>~/.local/share/fcitx5/rime/build/clover.schema.yaml</code>。</p><h4 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S noto-fonts-emoji</span><br><span class="line">yay -S noto-color-emoji-fontconfig</span><br></pre></td></tr></table></figure><p>注销会话或重启。</p><h4 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h4><p>指输入特殊符号拼音出现候选词（如“pingfang”出现“²”），或输入“/xx”（“xx”表示一些英文字母的组合）出现一类候选词（如“/sx”出现数学相关特殊符号）。</p><p>对于前者，目前尚无较好的解决方案。</p><p>对于后者，参考该<a href="https://github.com/fkxxyz/rime-cloverpinyin/issues/71#issuecomment-820448262">回复</a>。</p><p><strong>注意</strong>：特殊符号支持存在已知问题，可能导致内存溢出，可以通过如下命令简单修复：<a href="https://github.com/fkxxyz/rime-cloverpinyin/issues/99">^8</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://github.com/fkxxyz/rime-symbols/raw/master/rime-symbols-gen)</span>&quot;</span></span><br><span class="line">mkdir -p ~/.<span class="built_in">local</span>/share/fcitx5/rime/opencc</span><br><span class="line">mv symbol.json symbol_category.txt symbol_word.txt ~/.<span class="built_in">local</span>/share/fcitx5/rime/opencc</span><br></pre></td></tr></table></figure><p>重新部署 Rime。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍 Arch Linux 本地化为简体中文的操作。&lt;/p&gt;
&lt;p&gt;本文的测试环境是 KDE Plasma + SDDM + Wayland。考虑到 Xorg 教程较多，且大部分操作通用，本文会存在 Xorg 和 Wayland 混合描述的情况。&lt;/p&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    <category term="Tutorial" scheme="https://blog.tamako.work/categories/Essay/Tutorial/"/>
    
    
    <category term="Arch Linux" scheme="https://blog.tamako.work/tags/Arch-Linux/"/>
    
    <category term="Simplified Chinese" scheme="https://blog.tamako.work/tags/Simplified-Chinese/"/>
    
    <category term="Operating System" scheme="https://blog.tamako.work/tags/Operating-System/"/>
    
    <category term="Desktop" scheme="https://blog.tamako.work/tags/Desktop/"/>
    
    <category term="Localization" scheme="https://blog.tamako.work/tags/Localization/"/>
    
  </entry>
  
  <entry>
    <title>【Arch Linux】maddy 邮件服务器搭建</title>
    <link href="https://blog.tamako.work/techdev/arch/maddy/"/>
    <id>https://blog.tamako.work/techdev/arch/maddy/</id>
    <published>2022-05-15T17:09:52.000Z</published>
    <updated>2022-07-13T12:03:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/foxcpp/maddy">maddy</a> 是一个开源的轻量级“可组合”（composable）多合一邮件服务器，支持通过 IMAP/SMTP 等协议和 DKIM、SPF、DMARC、DANE、MTA-STS 等安全模式收发邮件。本文将以<a href="https://maddy.email/tutorials/setting-up/">官方文档</a>为主线，整理 maddy 服务器配置流程。</p></blockquote><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>为保证 maddy 的正常运行，请先明确一些建议满足的前提条件：</p><ul><li>具有公网地址（本文以 IPv4 为例）并开放 25、143、465（TLS）、587、993（TLS）等端口（一些 VPS 提供商如谷歌云不支持）的服务器；</li><li>拥有一个域名（最好是付费二级域名，避免一些 DNS 服务商如 Cloudflare 封禁对其的 API 操作），并接入 DNS 服务商（本文以 <a href="https://www.cloudflare.com/">Cloudflare</a> 为例）；</li><li>TLS 证书（本文以 <a href="https://letsencrypt.org/">Let’s Encrypt</a> 和一款证书获取软件 <a href="https://certbot.eff.org/">certbot</a> 为例）。</li></ul><p>为叙述方便，本文假设邮件服务器的主域名为 example.org，<a href="https://zh.wikipedia.org/zh-cn/MX%E8%AE%B0%E5%BD%95">邮件交换</a>（<a href="https://en.wikipedia.org/wiki/MX_record">MX</a>）域名为 mx1.example.org，公网 IPv4 地址为 10.2.3.4，邮件账户为 <a href="mailto:&#112;&#111;&#115;&#116;&#109;&#97;&#115;&#116;&#101;&#x72;&#x40;&#101;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#x6f;&#x72;&#x67;">&#112;&#111;&#115;&#116;&#109;&#97;&#115;&#116;&#101;&#x72;&#x40;&#101;&#120;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#x6f;&#x72;&#x67;</a>。</p><p>同时需要在服务器上至少安装如下的软件包：</p><ul><li>maddy</li><li>certbot<ul><li>certbot-dns-cloudflare</li></ul></li><li>nginx（或其他 Web 服务端）</li></ul><p>除 maddy 外，其他的软件包都可以使用 <code>pacman</code> 直接安装。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以在 GitHub 的 <a href="https://github.com/foxcpp/maddy/releases">Releases</a> 页面获取 maddy 最新版本的源码和预编译程序。也可以参照<a href="https://maddy.email/tutorials/setting-up/#installing-maddy">官方文档</a>的说明，从源码构建、AUR 处获取或 Docker 镜像部署。</p><p><strong>注意</strong>：从 AUR 处获取需要下载体积很大的 golang 编译器。为节约下载并安装编译器的时间，读者可以直接使用 GitHub 的预编译程序。本文也以此为例。</p><p>在服务器终端中执行如下命令，以下载 maddy 的预编译程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 zstd 包，以解压 *.zst 类型的文件</span></span><br><span class="line">sudo pacman -S zstd --needed</span><br><span class="line"><span class="comment"># 下载地址，可以任意选择</span></span><br><span class="line"><span class="built_in">cd</span> ~/Downloads</span><br><span class="line">wget https://github.com/foxcpp/maddy/releases/download/v0.5.4/maddy-0.5.4-x86_64-linux-musl.tar.zst</span><br><span class="line"><span class="comment"># 参考 zsh 的 extract 插件</span></span><br><span class="line">tar --zstd -xvf maddy-0.5.4-x86_64-linux-musl.tar.zst || zstdcat maddy-0.5.4-x86_64-linux-musl.tar.zst | tar xvf -</span><br><span class="line"><span class="built_in">cd</span> maddy-0.5.4-x86_64-linux-musl</span><br><span class="line"><span class="comment"># 复制服务</span></span><br><span class="line">sudo cp systemd/*.service /etc/systemd/system</span><br><span class="line"><span class="comment"># 复制可执行文件</span></span><br><span class="line">sudo cp maddy maddyctl /usr/<span class="built_in">local</span>/bin</span><br><span class="line"><span class="comment"># 复制配置文件</span></span><br><span class="line">sudo mkdir -p /etc/maddy</span><br><span class="line">sudo cp maddy.conf /etc/maddy</span><br><span class="line"><span class="comment"># 复制 man 文件</span></span><br><span class="line">sudo cp man/*.1 /usr/share/man/man1</span><br><span class="line">sudo cp man/*.5 /usr/share/man/man5</span><br></pre></td></tr></table></figure><p>启动服务前，先加载所有新增服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>若要开机自启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> maddy</span><br></pre></td></tr></table></figure><p>因为 maddy 运行在非 root 用户上，还需要创建一个用户用以运行 maddy 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -mrU -s /sbin/nologin -d /var/lib/maddy -c <span class="string">&quot;maddy mail server&quot;</span> maddy</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>使用任何编辑器打开 <code>/etc/maddy/maddy.conf</code>，修改 <code>$(hostname)</code> 和 <code>$(primary_domain)</code> 变量的值为 <code>mx1.example.org</code> 和 <code>example.org</code>。</p><h3 id="TLS-证书"><a href="#TLS-证书" class="headerlink" title="TLS 证书"></a>TLS 证书</h3><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><p>Let’s Enccrypt 签发的 TLS 证书可以通过 certbot 获取。根据 <a href="https://eff-certbot.readthedocs.io/en/stable">certbot</a> 和 <a href="https://certbot-dns-cloudflare.readthedocs.io/en/stable/">certbot-dns-cloudflare</a> 的官方文档，首先需要在 Cloudflare 的 API Token <a href="https://dash.cloudflare.com/profile/api-tokens">配置页面</a>新建一个 Token，选择“Edit zone DNS”的模板，在“Zone Resources”选择目标二级域名（本文则是“example.org”）即可。</p><p><strong>注意</strong>：Token 只会显示一次，在配置好证书前，请务必牢记。</p><p>随后，可以在服务器上存储 Token 以方便后续使用。在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.secrets/certbot</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;TOKEN&gt;&#x27;</span> &gt; ~/.secrets/certbot/cloudflare.ini  <span class="comment"># 替换为获取到的 Token</span></span><br></pre></td></tr></table></figure><p>并设置权限提高安全性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 ~/.secrets/certbot/cloudflare.ini</span><br></pre></td></tr></table></figure><p>再使用 certbot 获取证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot certonly --dns-cloudflare --dns-cloudflare-credentials ~/.secrets/certbot/cloudflare.ini -d <span class="string">&#x27;*.example.org&#x27;</span> -d <span class="string">&#x27;example.org&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：可以选择不为含通配符域名，而是根据后文实际需要指定必要的三级域名签发证书。</p><p>首次获取证书需要填写邮箱等个人信息。签发完毕后则可以通过 <code>sudo certbot certificates</code> 获取证书的详细信息和存储位置。一般存储位置在 <code>/etc/letsencrypt/live/example.org</code>，其中证书文件名为 <code>fullchain.pem</code>，私钥路径为 <code>privkey.pem</code>。</p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>编辑 <code>/etc/maddy/maddy.conf</code>，修改 <code>tls file</code> 一行为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tls file /etc/letsencrypt/live/$(primary_domain)/fullchain.pem /etc/letsencrypt/live/$(primary_domain)/privkey.pem</span><br></pre></td></tr></table></figure><p><code>/etc/letsencrypt/live</code> 文件夹默认权限为 750，maddy 无法访问，故需要使用 ACL 进行权限控制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo setfacl -R -m u:maddy:rX /etc/letsencrypt/&#123;live,archive&#125;</span><br></pre></td></tr></table></figure><p>此时可以启动 maddy 服务来测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start maddy</span><br></pre></td></tr></table></figure><p>若服务未报错，则可以继续进行配置。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>进入 Cloudflare 的 DNS 配置页，作出如下所示的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">example.org.   A     10.2.3.4</span><br><span class="line">example.org.   MX    10 mx1.example.org.</span><br><span class="line">mx1.example.org.   A     10.2.3.4</span><br><span class="line">example.org.     TXT   &quot;v=spf1 mx ~all&quot;</span><br><span class="line">mx1.example.org. TXT   &quot;v=spf1 mx ~all&quot;</span><br><span class="line">_dmarc.example.org.   TXT    &quot;v=DMARC1; p=quarantine; ruf=mailto:postmaster@example.org&quot;</span><br><span class="line">_mta-sts.example.org.   TXT    &quot;v=STSv1; id=1&quot;</span><br><span class="line">_smtp._tls.example.org. TXT    &quot;v=TLSRPTv1;rua=mailto:postmaster@example.org&quot;</span><br><span class="line">default._domainkey.example.org.    TXT   &quot;v=DKIM1; k=ed25519; p=nAcUUozPlhc4VPhp7hZl+owES7j7OlEv0laaDEDBAqg=&quot;</span><br></pre></td></tr></table></figure><p>其中最后一条记录的值需要用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /var/lib/maddy/dkim_keys/example.org_default.dns</span><br></pre></td></tr></table></figure><p>的输出替换。若显示文件不存在，请确认 maddy 服务是否曾成功运行过至少一次。</p><h3 id="MTA-STS"><a href="#MTA-STS" class="headerlink" title="MTA-STS"></a>MTA-STS</h3><p>MTA-STS 要求访问 <a href="https://mta-sts.example.org/.well-known/mta-sts.txt">https://mta-sts.example.org/.well-known/mta-sts.txt</a> 时能输出类似如下的文本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">version: STSv1</span><br><span class="line">mode: enforce</span><br><span class="line">max_age: 604800</span><br><span class="line">mx: mx1.example.org</span><br></pre></td></tr></table></figure><p>对于已经安装 HTTP Echo 模块的 Nginx，直接在 <code>/etc/nginx/nginx.conf</code> 中添加如下条目：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span>     mta-sts.example.org;</span><br><span class="line">    <span class="attribute">error_log</span>       /var/log/nginx/log.log;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/example.org/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/example.org/privkey.pem;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">location</span> /.well-known/mta-sts.txt &#123;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;version: STSv1&#x27;</span>;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;mode: enforce&#x27;</span>;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;max_age: 604800&#x27;</span>;</span><br><span class="line">        <span class="attribute">echo</span> <span class="string">&#x27;mx: mx1.example.org&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于未安装该模块的 Nginx，先添加如下条目：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span>     mta-sts.example.org;</span><br><span class="line">    <span class="attribute">error_log</span>       /var/log/nginx/log.log;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/example.org/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/example.org/privkey.pem;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">location</span> /.well-known/mta-sts.txt &#123;</span><br><span class="line">        <span class="attribute">root</span> /usr/share/nginx/mta-sts;  <span class="comment"># /usr/share/nginx 是 Nginx 的静态资源默认位置</span></span><br><span class="line">        <span class="attribute">index</span> /mta-sts.txt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再新建 <code>/usr/share/nginx/mta-sts</code> 文件夹，将指定文本写入 <code>mta-sts.txt</code> 文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo cat &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">version: STSv1</span></span><br><span class="line"><span class="string">mode: enforce</span></span><br><span class="line"><span class="string">max_age: 604800</span></span><br><span class="line"><span class="string">mx: mx1.example.org</span></span><br><span class="line"><span class="string">EOF</span> &gt; /usr/share/nginx/mta-sts/mta-sts.txt</span><br></pre></td></tr></table></figure><p>重启 Nginx 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><p>检查上述网络路径是否能够正常访问。</p><h3 id="DANE"><a href="#DANE" class="headerlink" title="DANE"></a>DANE</h3><p>设置 TLSA（DANE）需要在 <a href="https://www.huque.com/bin/gen_tlsa">https://www.huque.com/bin/gen_tlsa</a> 生成对应的 DNS 记录。</p><p>进入页面后，在“Enter/paste PEM format X.509 certificate here:”下的文本框中输入<a href="#tls-%E8%AF%81%E4%B9%A6">上文</a>中获取的证书的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /etc/letsencrypt/live/example.org/fullchain.pem</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：该证书很长，务必复制完全。</p><p>下方的“Port Number:”填写 <code>25</code>，<code>Transport Protocol:</code> 填写 <code>tcp</code>，<code>Domain Name:</code> 填写 <code>mx1.example.org</code>。再点击“Generate”生成记录。将 DNS 记录写入 Cloudflare 中。</p><h3 id="创建邮件账户"><a href="#创建邮件账户" class="headerlink" title="创建邮件账户"></a>创建邮件账户</h3><p>在服务器终端中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">maddyctl creds create postmaster@example.org</span><br><span class="line">maddyctl imap-acct create postmaster@example.org</span><br></pre></td></tr></table></figure><p>此时，邮件账户的用户名为“<a href="mailto:&#112;&#x6f;&#115;&#116;&#x6d;&#x61;&#x73;&#x74;&#x65;&#114;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#101;&#46;&#111;&#x72;&#x67;">&#112;&#x6f;&#115;&#116;&#x6d;&#x61;&#x73;&#x74;&#x65;&#114;&#x40;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#101;&#46;&#111;&#x72;&#x67;</a>”，密码则在创建账户时要求设置。该账户已经可以在邮件客户端（如 Thunderbird 和 Outlook）中配置并使用。</p><h3 id="（可选）开启-DNSSEC-认证"><a href="#（可选）开启-DNSSEC-认证" class="headerlink" title="（可选）开启 DNSSEC 认证"></a>（可选）开启 DNSSEC 认证</h3><p><a href="https://en.wikipedia.org/wiki/Domain_Name_System_Security_Extensions">DNSSEC</a>（Domain Name System Security Extensions），即<a href="https://zh.wikipedia.org/zh-cn/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E6%89%A9%E5%B1%95">域名系统安全扩展</a>，对DNS提供给DNS客户端（解析器）的DNS数据来源进行认证，并验证不存在性和校验数据完整性验证。</p><p><a href="https://wiki.archlinux.org/title/DNSSEC">Arch Wiki</a> 中给出了一些验证方法。安装 <code>ldns</code> 包后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ drill -DT example.org  <span class="comment"># 替换为二级域名</span></span><br><span class="line"><span class="comment"># 省略多行</span></span><br><span class="line">[T] example.org. 60      IN      A       10.2.3.4</span><br><span class="line">;;[S] self sig OK; [B] bogus; [T] trusted</span><br></pre></td></tr></table></figure><p>如果命令执行结果如上所示（域名前的 flag 值为“T”），则说明 DNSSEC 认证已开启；反之，请参考 <a href="https://wiki.archlinux.org/title/DNSSEC#Install_a_DNSSEC-validating_resolver">Install a DNSSEC-validating resolver</a> 章节，或参考 DNS 服务商的文档。</p><p>以下简单介绍 Cloudflare 为域名开启 DNSSEC 的方法：进入 Cloudflare <a href="https://dash.cloudflare.com/">控制台</a>后，进入目标域名的详情页面，点击左侧的“DNS”选项卡，在页面尾部的“DNSSEC”部分点击“Enable DNSSEC”。随后 Cloudflare 将给出域名的 DS Record。再进入<strong>域名注册商</strong>的域名管理页面设置 DS Record。具体设置方法参照 Cloudflare 的<a href="https://developers.cloudflare.com/dns/additional-options/dnssec#step-2--add-ds-record-to-your-registrar">官方文档</a>。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/foxcpp/maddy&quot;&gt;maddy&lt;/a&gt; 是一个开源的轻量级“可组合”（composable）多合一邮件服务器，支持通过 IMAP/SMTP 等协议和 DKIM、SPF、DMARC、DANE、MTA-STS 等安全模式收发邮件。本文将以&lt;a href=&quot;https://maddy.email/tutorials/setting-up/&quot;&gt;官方文档&lt;/a&gt;为主线，整理 maddy 服务器配置流程。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
    <category term="Arch Linux" scheme="https://blog.tamako.work/tags/Arch-Linux/"/>
    
    <category term="maddy" scheme="https://blog.tamako.work/tags/maddy/"/>
    
    <category term="Email" scheme="https://blog.tamako.work/tags/Email/"/>
    
  </entry>
  
  <entry>
    <title>【Arch Linux】misskey 手动部署和配置</title>
    <link href="https://blog.tamako.work/techdev/arch/misskey/"/>
    <id>https://blog.tamako.work/techdev/arch/misskey/</id>
    <published>2022-04-29T12:45:20.000Z</published>
    <updated>2022-07-13T12:03:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://misskey-hub.net/en/">misskey</a> 是一款开源的“跨星际”（interplanetary）社交平台，以微博为主要形式，界面美观，内含元素丰富。本文即针对该平台在 Arch Linux 的手动安装方式作说明。</p><span id="more"></span><blockquote><p>笔者：为什么不用 docker 安装（这是官方认定 recommended 的安装方式）？只是不怎么想用 docker（</p></blockquote><blockquote><p><strong>注意</strong>：基于 Arch Linux 发行版的特殊性（非开箱即用），笔者会<strong>尽可能多</strong>地补充安装过程，<strong>尽可能</strong>让读者能从头到尾依照本文操作。但若存在疏漏，敬请谅解。</p></blockquote><h2 id="检查系统配置"><a href="#检查系统配置" class="headerlink" title="检查系统配置"></a>检查系统配置</h2><p>misskey 对服务端的性能配置要求较高，建议配置至少 2 核 CPU 和 4GB RAM。笔者使用的服务器部分配置如下（多人共有，但对 misskey 来说也已足够）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ neofetch</span><br><span class="line"><span class="comment"># 省略部分输出</span></span><br><span class="line">OS: Arch Linux x86_64</span><br><span class="line">Kernel: 5.15.34-1-lts</span><br><span class="line">CPU: AMD EPYC 7282 (4) @ 2.794GHz</span><br><span class="line">Memory: 1590MiB / 7950MiB</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><p>安装所有依赖（这里假设读者已经安装了 <code>sudo</code> 并配置好相关权限）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syu  <span class="comment"># 更新系统</span></span><br><span class="line">sudo pacman -S sudo visudo nano base-devel python --needed</span><br><span class="line">sudo python -m ensurepip --upgrade  <span class="comment"># 安装/升级 pip</span></span><br><span class="line">sudo ln -sf /usr/bin/&#123;nano,vi&#125;</span><br><span class="line">sudo visudo</span><br></pre></td></tr></table></figure><p>在打开的编辑器 <code>nano</code> 中去除 <code>#%wheel ALL=(ALL:ALL) ALL</code> 一行前的注释，依次按 <code>Ctrl+X</code>、<code>y</code>、<code>Enter</code> 保存。</p><p>同时考虑到 pip 用户配置下 <code>$PATH</code> 环境变量问题，使用编辑器打开当前终端配置（例如 <code>~/.bashrc</code>），添加如下行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=~/.<span class="built_in">local</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h4 id="misskey"><a href="#misskey" class="headerlink" title="misskey"></a>misskey</h4><p>官方文档中给出的 misskey 需要的依赖有：</p><ul><li>Node.JS（16.x）</li><li>PostgreSQL（建议 12.x 或 13.x）</li><li>Redis</li><li>yarn（可选，若不安装，后续安装过程中 <code>yarn</code> 应替换为 <code>npx yarn</code>）</li><li>FFmpeg</li></ul><p>考虑到大部分软件的向后兼容性，可以直接安装所有依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S nodejs npm postgresql redis yarn ffmpeg --needed</span><br></pre></td></tr></table></figure><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>因笔者服务器环境中存在多用户、多管理情况，此处的操作与官方文档不同——创建了一个有 <code>sudo</code> 权限、可登录、有家目录的用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -G wheel -s /bin/bash misskey</span><br></pre></td></tr></table></figure><p>并使用 <code>sudo passwd misskey</code> 设置登录密码。</p><p>若依照官方文档，仅需：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -r -s /usr/bin/nologin misskey</span><br></pre></td></tr></table></figure><p>之后切换入该用户继续操作：<code>su - misskey</code>。</p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>根据上文中用户创建方式，目录的路径可能不能完全如文中所述。请读者根据自身情况合理选择安装路径。</p><p>在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir .opt</span><br><span class="line"><span class="built_in">cd</span> .opt</span><br><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/misskey-dev/misskey.git</span><br><span class="line"><span class="built_in">cd</span> misskey</span><br><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：截至本文编写时，misskey 源码库克隆大小 88.22MB，子库（misskey-assets）克隆大小 69.76MB。请自行选择是否“科学上网”或使用镜像站。</p><h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><p>在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：请自行选择是否“科学上网”或使用镜像站。</p><p><strong>注意</strong>：该过程耗时较长。若无人值守，建议使用 <code>tmux</code> 或 <code>screen</code> 防止 ssh 连接中断导致安装过程中断。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=production yarn build</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：该过程耗时较长。若无人值守，建议使用 <code>tmux</code> 或 <code>screen</code> 防止 ssh 连接中断导致安装过程中断。</p><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><h4 id="Postgresql"><a href="#Postgresql" class="headerlink" title="Postgresql"></a>Postgresql</h4><p>在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo -iu postgres  <span class="comment"># 切换到 postgres 用户</span></span><br><span class="line">initdb -D /var/lib/postgres/data</span><br><span class="line"><span class="comment"># （可选）修改 locale 和编码：</span></span><br><span class="line"><span class="comment"># initdb --locale=en_US.UTF-8 --encoding=UTF8 -D /var/lib/postgres/data</span></span><br><span class="line"><span class="built_in">exit</span>  <span class="comment"># 返回 misskey 用户</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> postgresql --now</span><br><span class="line">sudo systemctl status postgresql  <span class="comment"># 查看服务状态</span></span><br><span class="line"><span class="comment"># （可选）添加 SQL 操作历史文件</span></span><br><span class="line">sudo touch /var/lib/postgres/.psql_history</span><br><span class="line">sudo chown postgres:postgres /var/lib/postgres/.psql_history</span><br><span class="line">sudo -u postgres psql</span><br></pre></td></tr></table></figure><p>进入 Postgresql 操作界面，执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database misskey;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> misskey <span class="keyword">with</span> encrypted password <span class="string">&#x27;&#123;YOUR_PASSWORD&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> database misskey <span class="keyword">to</span> misskey;</span><br><span class="line">\q</span><br></pre></td></tr></table></figure><p>其中上面的 <code>&#39;&#123;YOUR_PASSWORD&#125;&#39;</code> 可以任意配置，但需要和后面的 misskey 配置文件保持一致。</p><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> redis --now</span><br><span class="line">sudo systemctl status redis  <span class="comment"># 查看服务状态</span></span><br></pre></td></tr></table></figure><h3 id="前置配置"><a href="#前置配置" class="headerlink" title="前置配置"></a>前置配置</h3><p>从 <code>.config</code> 文件夹中复制 <code>example.yml</code> 到 <code>default.yml</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp .config/&#123;example,default&#125;.yml</span><br></pre></td></tr></table></figure><p>然后使用编辑器编辑后者，例如 <code>nano .config/default.yml</code>。其中最重要的配置（不修改就会直接导致 misskey 跑不通）是：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   ┌──────────────────────────┐</span></span><br><span class="line"><span class="comment">#───┘ PostgreSQL configuration └────────────────────────────────</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Database name</span></span><br><span class="line">  <span class="attr">db:</span> <span class="string">misskey</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Auth</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">example-misskey-user</span></span><br><span class="line">  <span class="attr">pass:</span> <span class="string">example-misskey-pass</span></span><br></pre></td></tr></table></figure><p>将其中的 <code>user</code> 配置项改为 <code>user: misskey</code>，<code>pass</code> 配置项根据上面的配置保持一致。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn run init</span><br><span class="line">NODE_ENV=production npm start</span><br></pre></td></tr></table></figure><p>若在终端中看到类似如下的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INFO *  [core boot]     Welcome to Misskey!</span><br><span class="line">INFO *  [core boot]     Misskey v12.110.1</span><br><span class="line">INFO *  [core boot env] NODE_ENV: production</span><br><span class="line">INFO *  [core boot env] You do not have root privileges</span><br><span class="line">INFO *  [core boot nodejs]      Version v17.9.0 detected.</span><br><span class="line">DONE *  [core boot config]      Loaded</span><br><span class="line">INFO *  [core boot db]  Connecting...</span><br><span class="line">DONE *  [core boot db]  Connected: v14.2</span><br><span class="line">DONE *  [core boot]     Misskey initialized</span><br><span class="line">INFO *  [core boot]     Starting 1 worker...</span><br><span class="line">(node:324552) ExperimentalWarning: Importing JSON modules is an experimental feature. This feature could change at any time</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">DONE *  [core boot]     All workers started</span><br><span class="line">DONE *  [core boot]     Now listening on port 3000 on https://example.tld</span><br></pre></td></tr></table></figure><p>则表示 misskey 部署成功。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="systemd-服务"><a href="#systemd-服务" class="headerlink" title="systemd 服务"></a>systemd 服务</h3><p>可以配置 systemd 服务让其管理 misskey 的运行。新建 <code>/etc/systemd/system/misskey.service</code>，在编辑器中打开并填入如下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Misskey daemon</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=misskey</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/npm start</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/home/misskey/.opt/misskey</span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;NODE_ENV=production&quot;</span></span><br><span class="line"><span class="attr">TimeoutSec</span>=<span class="number">60</span></span><br><span class="line"><span class="attr">StandardOutput</span>=syslog</span><br><span class="line"><span class="attr">StandardError</span>=syslog</span><br><span class="line"><span class="attr">SyslogIdentifier</span>=misskey</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>然后分别通过 <code>sudo systemctl start misskey</code> 和 <code>sudo systemctl enable misskey</code> 启动 misskey 并添加开机自启。</p><h3 id="端口转发（反向代理）和-TLS"><a href="#端口转发（反向代理）和-TLS" class="headerlink" title="端口转发（反向代理）和 TLS"></a>端口转发（反向代理）和 TLS</h3><p>misskey 支持 HTTPS/SSL/TLS 。这需要配置相关证书，并设置端口转发（反向代理）。笔者使用的软件包是 nginx，并已在 Cloudflare 添加一个域名。</p><p><strong>注意</strong>：部分免费二级域名（如 .cf、.tk）无法使用后文中提及的 Cloudflare API 自动更新 DNS 记录。请读者自行选用其他域名，或使用其他 DNS 服务。</p><h4 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h4><p>首先安装自动签发 Let’s Encrypt 证书的软件包 certbot：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install certbot certbot-cloudflare-dns</span><br></pre></td></tr></table></figure><p>为防止证书信息泄露（certbot 默认工作和日志目录均在 <code>/etc</code>、<code>/var</code> 等文件夹中），先创建相关文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 工作目录、日志目录、配置目录（存放证书）</span></span><br><span class="line">mkdir -p ~/.var/letsencrypt ~/.logs/letsencrypt ~/.etc/letsencrypt</span><br></pre></td></tr></table></figure><p>再写入 Cloudflare API 的相关配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.secrets/certbot</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;dns_cloudflare_api_token = &#123;API_TOKEN&#125;&#x27;</span> &gt; ~/.secrets/certbot/cloudflare.ini</span><br></pre></td></tr></table></figure><p>其中 <code>&#123;API_TOKEN&#125;</code> 表示 Cloudflare 账户的 API token。请参见 Cloudflare 和 Certbot 相关文档配置。</p><p>为保证安全性，建议为其重新配置权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 700 ~/.secrets</span><br><span class="line">chmod -R 600 ~/.secrets/certbot/cloudflare.ini</span><br></pre></td></tr></table></figure><p>最后，在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处使用 Cloudflare API 更新 DNS</span></span><br><span class="line">certbot certonly --dns-cloudflare --dns-cloudflare-credentials ~/.secrets/certbot/cloudflare.ini -d <span class="string">&#x27;&#123;domain&#125;&#x27;</span> --config-dir ~/.etc/letsencrypt --work-dir ~/.var/letsencrypt --logs-dir ~/.logs/letsencrypt</span><br></pre></td></tr></table></figure><p>其中 <code>&#39;&#123;domain&#125;&#39;</code> 是为 misskey 分配的域名。certbot 运行过程中需要同意相关服务条款并输入邮箱注册。</p><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>在 DNS 服务商（如 Cloudflare）中添加一条 A/AAAA 记录，从域名指向服务器的 IP 地址。</p><h4 id="端口转发（反向代理）"><a href="#端口转发（反向代理）" class="headerlink" title="端口转发（反向代理）"></a>端口转发（反向代理）</h4><p>在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S nginx-mainline --needed</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx --now</span><br></pre></td></tr></table></figure><p>再打开 <code>/etc/nginx/nginx.conf</code>，添加如下类似的配置项：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span>  <span class="string">&#x27;&#123;domain&#125;&#x27;</span>;</span><br><span class="line">    <span class="attribute">error_log</span>    /var/log/nginx/log.log;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /home/misskey/.etc/letsencrypt/live/<span class="string">&#x27;&#123;domain&#125;&#x27;</span>/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /home/misskey/.etc/letsencrypt/live/<span class="string">&#x27;&#123;domain&#125;&#x27;</span>/privkey.pem;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:3000;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host $http_host;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Referer http://$host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>&#39;&#123;domain&#125;&#39;</code> 表示分配的域名。证书路径以实际情况为准。</p><p>最后重启 nginx 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><h4 id="misskey-1"><a href="#misskey-1" class="headerlink" title="misskey"></a>misskey</h4><p>打开 misskey 配置文件 <code>~/.opt/misskey/.config/default.yml</code>，修改如下配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   ┌─────┐</span></span><br><span class="line"><span class="comment">#───┘ URL └─────────────────────────────────────────────────────</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Final accessible URL seen by a user.</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">&#x27;&#123;domain&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>设置为先前分配的域名。</p><p>最后重启 misskey 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart misskey</span><br></pre></td></tr></table></figure><h2 id="特别致谢"><a href="#特别致谢" class="headerlink" title="特别致谢"></a>特别致谢</h2><p>感谢一位朋友“梦可味”在撰写本文前提供的在 Ubuntu 发行版中安装 misskey 的教程，其上有对多处踩坑的详细记录，让笔者能更快速地完成安装。之后会发布 misskey 在 Ubuntu 下的安装及配置教程。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://misskey-hub.net/en/docs/install/manual.html">misskey 官方文档</a></li><li><a href="https://www.garron.me/en/bits/build-essential-arch-linux.html">build-essential in Arch Linux</a></li><li><a href="https://wiki.archlinux.org/title/Users_and_groups">Users and groups - ArchWiki</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://misskey-hub.net/en/&quot;&gt;misskey&lt;/a&gt; 是一款开源的“跨星际”（interplanetary）社交平台，以微博为主要形式，界面美观，内含元素丰富。本文即针对该平台在 Arch Linux 的手动安装方式作说明。&lt;/p&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
    <category term="Arch Linux" scheme="https://blog.tamako.work/tags/Arch-Linux/"/>
    
    <category term="misskey" scheme="https://blog.tamako.work/tags/misskey/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux 物理机安装大体思路和部分实现细节（MBR &amp; GPT）</title>
    <link href="https://blog.tamako.work/techdev/arch/installation/"/>
    <id>https://blog.tamako.work/techdev/arch/installation/</id>
    <published>2022-04-28T12:18:05.000Z</published>
    <updated>2022-07-13T14:36:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>作为<a href="https://wiki.archlinux.org/title/Installation_guide">官方文档</a>的补充，大致提供一些安装 Arch Linux 到物理机上并安装桌面环境的思路和文档中未提及的细节。</p><span id="more"></span><h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><p>本文的主要篇幅将建立在如下几个设备之上：</p><ul><li>主力机<ul><li>操作系统：Manjaro x86_64</li><li>用途：下载并烧录镜像、为目标机器提供网络服务、<em>远程操作</em>、应急使用等</li></ul></li><li>目标机器<ul><li>操作系统：Windows 7 Utimate x86_64</li><li>磁盘数量：1</li><li>磁盘记录类型：MBR</li><li>启动类型：BIOS</li><li>目标：与 Windows 并存安装 Arch Linux</li></ul></li><li>U 盘<ul><li>总容量：8 GB</li><li>用途：烧录 Arch Linux 镜像</li></ul></li></ul><p>在文末，会对磁盘记录类型为 GPT、启动类型为 UEFI 的设备的安装过程，及图形界面其他的安装方案作一些说明。</p><p><strong>注意</strong>：强烈建议为主力机增添显示器、键盘等外设（对笔记本电脑等已有的除外），并在完全配置好网络环境前使用有线网络，防止因安装过程出现问题导致无法联网时难以检修。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p>建议在安装 Arch Linux 前分区，或是分出空闲空间，避免因不熟悉命令行环境或参数不直观导致数据丢失。笔者选择后者。</p><p>对于主力机是 Linux 的读者，可以使用 <code>gparted</code> 工具进行分区；对于 Windows 读者，可以使用 Disk Genius 工具进行分区。<strong>需要注意的是</strong>，gparted 底层使用 <code>parted</code> 命令行工具，而该工具在调整分区时无法调整分区头部位置。因此，对于有多启动需求的读者，建议在 Windows 下使用 Disk Genius 工具分区。若主力机上无 Windows 分区，可以在其他可移动介质中安装用于维护的 Windows PE 系统。</p><p>笔者的设备已有 BIOS/MBR 类型的 Windows 存在，安装时更加方便。对于大部分使用 UEFI/GPT 类型的读者，请参照<a href="https://wiki.archlinux.org/title/Arch_boot_process#Boot_loader">官方文档</a>。两种类型的设备的安装过程没有太大差异，且互联网上已有诸多相关的资料供读者参考。但若在安装后出现无法加载 Linux 或其它系统的情况（尤其是 UEFI/GPT 类型），排除软件原因后，考虑升级主板或更换相关硬件。</p><p>笔者的分区方案是：</p><table><thead><tr><th align="center">分区</th><th align="center">文件类型</th><th align="center">大小</th><th align="center">格式化</th><th align="center">启动项</th><th align="center">挂载点</th><th align="center"><strong>安装镜像环境</strong>中的挂载点</th></tr></thead><tbody><tr><td align="center"><code>/dev/sda1</code></td><td align="center">HPFS/NTFS/exFAT</td><td align="center">65GB</td><td align="center">否</td><td align="center">是</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><code>/dev/sda2</code></td><td align="center">HPFS/NTFS/exFAT</td><td align="center">312.8GB</td><td align="center">否</td><td align="center">否</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><code>/dev/sda3</code></td><td align="center">Linux swap / Solaris</td><td align="center">8GB</td><td align="center">是</td><td align="center">否</td><td align="center">[SWAP]</td><td align="center"></td></tr><tr><td align="center"><code>/dev/sda4</code></td><td align="center">Linux</td><td align="center">80GB</td><td align="center">是</td><td align="center">否</td><td align="center"><code>/</code></td><td align="center"><code>/mnt</code></td></tr></tbody></table><p>其中，“挂载点”表示该分区在<strong>安装后</strong>操作系统中的路径，“<strong>安装镜像环境</strong>中的挂载点”表示该分区在<strong>当前环境</strong>（安装镜像环境）中的路径。</p><h3 id="烧录镜像"><a href="#烧录镜像" class="headerlink" title="烧录镜像"></a>烧录镜像</h3><p>终端执行 <code>sudo fdisk -l</code> 记录需要写入镜像的 U 盘的设备路径。根据<a href="https://wiki.archlinux.org/title/USB_flash_installation_medium#Using_basic_command_line_utilities">官方文档</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd bs=4M <span class="keyword">if</span>=/path/to/archlinux-version-x86_64.iso of=/dev/sdx conv=fsync oflag=direct status=progress</span><br></pre></td></tr></table></figure><p>注意写入后 U 盘的卷标应形如 <code>ARCH_YYYYDD</code>，其中 <code>YYYY</code> 和 <code>DD</code> 表示镜像版本号中的年份和月份。若不是，建议手动更改。</p><h3 id="U-盘启动"><a href="#U-盘启动" class="headerlink" title="U 盘启动"></a>U 盘启动</h3><p>U 盘启动成功后进入镜像内置的简易操作系统。与其他发行版镜像稍有不同的是，Arch Linux 镜像默认终端为 <code>zsh</code>，且相比于用户实装的 Arch Linux 内置有更多有利于系统安装和调试的工具。</p><p>正常启动后，屏幕显示的应该类似于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">To install Arch Linux follow the installation guide:</span><br><span class="line">https://wiki.archlinux.org/title/Installation_guide</span><br><span class="line"></span><br><span class="line">For Wi-Fi, authenticate to the wireless network using the iwctl utility.</span><br><span class="line">For mobile broadband (WWAN) modems, connect with the mmcli utility.</span><br><span class="line">Ethernet, WLAN and WWAN interfaces using DHCP should work automatically.</span><br><span class="line"></span><br><span class="line">After connecting to the internet, the installation guide can be accessed</span><br><span class="line">via the convenience script Installation_guide.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Last login: Mon Apr 25 18:11:37 2022 from 10.42.0.1</span><br><span class="line">root@archiso ~ #</span><br></pre></td></tr></table></figure><p>并且文字有多种颜色（上方有一行全是空格，在屏幕上实则是不同颜色的色块（经常用于做终端颜色测试））。</p><p>而读者若发现屏幕上显示的类似于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:: Mounting &#x27;/dev/disk/by-label/ARCH_202204&#x27; to &#x27;/run/archiso/bootmnt&#x27;</span><br><span class="line">Waiting 30 seconds for device /dev/disk/by-label/ARCH_202204 ...</span><br><span class="line">ERROR: &#x27;/dev/disk/by-label/ARCH_202204&#x27; device did not show up after 30 seconds...</span><br><span class="line">   Falling back to interactive prompt</span><br><span class="line">   You can try to fix the problem manually, log out when you are finished</span><br><span class="line">sh: can&#x27;t access tty: job control turned off</span><br><span class="line">[rootfs ]#</span><br></pre></td></tr></table></figure><p>说明 Arch Linux 安装镜像未找到设备（也就是 U 盘）。出现这种情况，一种原因是如上所述的未修改 U 盘的卷标。而另一种可能的原因则出在硬件上。先在终端上执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /dev/disk/by-label</span><br></pre></td></tr></table></figure><p>出现的条目中，若有类似 U 盘卷标的，尝试挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt</span><br><span class="line">mount /dev/disk/by-label/&lt;卷标&gt; /mnt</span><br></pre></td></tr></table></figure><p>若发现无法挂载，或挂载成功后发现其并非 U 盘的，则说明可能出现了上述硬件问题。此时尝试重新插拔 U 盘，再执行 <code>ls /dev/disk/by-label</code>。若发现形如“ARCH_YYYYDD”的条目出现，则执行 <code>exit</code> 开始安装系统。</p><p>另外，有必要检测 U 盘启动时的“启动模式”。执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /sys/firmware/efi/efivars</span><br></pre></td></tr></table></figure><p>若没有输出，则表示 U 盘在 BIOS 模式启动；反之，则为 UEFI 模式。若启动模式与预计不符，请考虑修改 BIOS 相关的设置。</p><h3 id="远程登入"><a href="#远程登入" class="headerlink" title="远程登入"></a>远程登入</h3><p>上文中笔者提到了“<em>远程操作</em>”。Arch Linux 安装镜像中内置 <code>ssh</code>，可以使用 ssh 远程登入进行安装。需要注意的是，笔者远程登入目标机器是为了方便截取终端上的文字，而考虑到 ssh 连接中断可能导致中断安装进程，<strong>不建议</strong>这么做。若确实需要，在终端中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>在文本编辑器中找到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># To disable tunneled clear text passwords, change to no here!</span><br><span class="line">#PasswordAuthentication yes</span><br><span class="line">#PermitEmptyPasswords no</span><br></pre></td></tr></table></figure><p>将其修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># To disable tunneled clear text passwords, change to no here!</span><br><span class="line">PasswordAuthentication yes</span><br><span class="line">PermitEmptyPasswords yes</span><br></pre></td></tr></table></figure><p>按 <code>Ctrl+X</code>，再按 <code>y</code> 保存文件，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><p>重启 ssh 服务后，尝试登入。</p><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p>本节对应<a href="https://wiki.archlinux.org/title/Installation_guide">官方文档</a>中“<a href="https://wiki.archlinux.org/title/Installation_guide#Boot_the_live_environment">Boot the live environment</a>”小节到“<a href="https://wiki.archlinux.org/title/Installation_guide#Reboot">Reboot</a>”小节。大多数情况下只需要根据目标机器的环境修改少数参数就可以直接执行上面的代码。</p><h4 id="网络服务"><a href="#网络服务" class="headerlink" title="网络服务"></a>网络服务</h4><p>正如官方文档中提到的那样，安装镜像中的系统与用户实际使用的系统并不完全相同，在前者环境中能够正常运作的机能可能在后者环境中便会失灵。“<a href="https://wiki.archlinux.org/title/Installation_guide#Install_essential_packages">Install essential packages</a>”小节中也提到了一些可选的在安装系统时即配置的软件包，不过其中最重要的是网络服务相关的包。若不能保证离开安装镜像环境后 Arch Linux 的网络通信正常，读者可以自行安装相关的包，必要时可提前配置。</p><p>另外，对命令行环境不熟悉或读写配置文件不顺畅的读者，可以安装 <code>nmtui</code>，用以在交互式环境下管理网络服务。笔者选择的包为：<code>net-tools</code>、<code>iproute2</code>、<code>dhcpcd</code>、<code>traceroute</code>、<code>networkmanager</code>（<code>nmtui</code> 被包含在该包中）。</p><h4 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h4><p>后续的安装操作需要读写配置文件，因此建议安装 <code>vim</code> 或 <code>nano</code> 等文本编辑相关的包。</p><h4 id="Boot-loader"><a href="#Boot-loader" class="headerlink" title="Boot loader"></a>Boot loader</h4><p>这需要读者仔细阅读官方文档（如 <a href="https://wiki.archlinux.org/title/GRUB">GRUB</a>）的<strong>全文</strong>。绝大多数可能的情况在文档中都有描述。对于笔者的设备，笔者使用 GRUB 做了如下操作，以保证 NTFS 分区下的 Windows 能被 GRUB 识别（假定已经 <code>arch-chroot</code> 进入系统）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pacman -S os-prober grub ntfs-3g</span><br><span class="line">grub-install --target=i386-pc /dev/sda</span><br><span class="line"><span class="comment"># 修改 `/etc/default/grub`，将 `#GRUB_DISABLE_OS_PROBER=false` 一行的注释去除</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>确认无误后，执行后续安装步骤。</p><h2 id="安装后"><a href="#安装后" class="headerlink" title="安装后"></a>安装后</h2><p>读者可以在<a href="https://wiki.archlinux.org/title/General_recommendations">官方文档</a>中阅读有关安装后推荐的行动。</p><h3 id="桌面环境"><a href="#桌面环境" class="headerlink" title="桌面环境"></a>桌面环境</h3><p>笔者选择的桌面环境是：</p><ul><li>显示服务器：<a href="https://wiki.archlinux.org/title/Xorg">Xorg</a>（优先安装）</li><li>显示管理器：<a href="https://wiki.archlinux.org/title/SDDM">SDDM</a></li><li>桌面环境：<a href="https://wiki.archlinux.org/title/KDE">KDE</a></li></ul><p>这些在 Arch Linux Wiki 上都有同名词条，且描述得十分详细。这里不作赘述。即便在安装桌面环境后未能正常显示桌面，也可以使用其他 TTY 在终端下操作。</p><p>对于其中涉及的安装包，笔者不建议安装元包（包名含“-meta”）。这是考虑到：</p><ul><li>一般安装桌面环境所需的包后，无彻底卸载的需求；</li><li>应用程序相关的组件中若有想卸载的，由于这些组件都是元包的依赖项，此时无法完成卸载。</li></ul><p>若不慎安装元包，也可以在 Live CD 环境中卸载元包后重新安装组包（包名不含“-meta”，安装时需要选择组别）。结束后执行 <code>pacman -Qsq &lt;包名&gt;</code> 验证。</p><h4 id="多用户登录界面"><a href="#多用户登录界面" class="headerlink" title="多用户登录界面"></a>多用户登录界面</h4><p>如果读者需要在开机时启动桌面环境，<a href="https://wiki.archlinux.org/title/Xinit#Autostart_X_at_login">官方文档</a>给出了一种方案。但直接按照文档配置，会发现启动计算机后仍然停留在 TTY1 的终端登录页面，输入用户名后跳过输入密码阶段直接进入桌面环境。这显然不是我们所期待的。修复这个问题很简单，只需要将所给的配置项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;DISPLAY&#125;</span>&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$&#123;XDG_VTNR&#125;</span>&quot;</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">exec</span> startx</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>放置在系统配置文件 <code>/etc/profile</code> 中即可。</p><h3 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h3><p>参见<a href="/techdev/arch/localization-simplified-chinese">《【Arch Linux】本地化：简体中文》</a>和<a href="/techdev/arch/localization-japanese">《【Arch Linux】本地化：日语》</a>。</p><h2 id="UEFI-和-GPT"><a href="#UEFI-和-GPT" class="headerlink" title="UEFI 和 GPT"></a>UEFI 和 GPT</h2><p>以下所列同样仅是笔者机器的情况。请读者根据遇到的情况自行判断。</p><h3 id="分区-1"><a href="#分区-1" class="headerlink" title="分区"></a>分区</h3><p>根据笔者机器情况，笔者设计的分区方案如下：</p><table><thead><tr><th align="center">分区</th><th align="center">文件类型</th><th align="center">启动项</th><th align="center">挂载点</th><th align="center"><strong>安装镜像环境</strong>中的挂载点</th></tr></thead><tbody><tr><td align="center"><code>/dev/sda1</code></td><td align="center">Linux</td><td align="center">是</td><td align="center"><code>/boot</code></td><td align="center"><code>/mnt/boot</code></td></tr><tr><td align="center"><code>/dev/sda5</code></td><td align="center">Linux</td><td align="center">否</td><td align="center"><code>/</code></td><td align="center"><code>/mnt</code></td></tr><tr><td align="center"><code>/dev/sdb4</code></td><td align="center">Linux</td><td align="center">否</td><td align="center"><code>/home</code></td><td align="center"><code>/mnt/home</code></td></tr><tr><td align="center"><code>/dev/sdb5</code></td><td align="center">Linux</td><td align="center">否</td><td align="center"><code>/usr</code></td><td align="center"><code>/mnt/usr</code></td></tr><tr><td align="center"><code>/dev/sdb6</code></td><td align="center">Linux swap / Solaris</td><td align="center">否</td><td align="center">[SWAP]</td><td align="center"></td></tr></tbody></table><p>注意到这里 <code>/usr</code> 和 <code>/</code>、<code>/boot</code> 分属不同的硬盘。此类情况将在后文加以说明。</p><h3 id="U-盘启动无法找到盘符的问题"><a href="#U-盘启动无法找到盘符的问题" class="headerlink" title="U 盘启动无法找到盘符的问题"></a>U 盘启动无法找到盘符的问题</h3><p>尝试在 UEFI+GPT 的机器上安装时，未出现此问题。</p><h3 id="Boot-loader-1"><a href="#Boot-loader-1" class="headerlink" title="Boot loader"></a>Boot loader</h3><p>笔者仍然使用 GRUB，但所执行的命令需要更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB</span><br></pre></td></tr></table></figure><p>这将在 <code>/boot/EFI</code> 文件夹中生成 <code>GRUB</code> 文件夹。一些旧教程中添加了诸如 <code>/dev/sda</code>、<code>/dev/sdb</code> 的参数，但现在实则是不需要的。</p><h3 id="usr-单独分区导致启动失败"><a href="#usr-单独分区导致启动失败" class="headerlink" title="/usr 单独分区导致启动失败"></a><code>/usr</code> 单独分区导致启动失败</h3><p>按照类似笔者的方案分区后，启动系统将失败，并显示类似如下的界面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda1: recovering journal</span><br><span class="line">Error:Root device mounted successfully, but /sbin/init does not exist.</span><br><span class="line">Bailing out, you are on your own.Good luck.</span><br><span class="line"></span><br><span class="line">sh: can&#x27;t access tty; job control turned off</span><br><span class="line">[rootfs ]#</span><br></pre></td></tr></table></figure><p>根据<a href="https://wiki.archlinux.org/title/Mkinitcpio#/usr_as_a_separate_partition">官方文档</a>的说明，读者需要重新进入 Live CD 环境，挂载所有分区后 <code>arch-chroot</code> 进入 chroot 环境。编辑其中的 <code>/etc/mkinitcpio.conf</code> 文件，修改类似如下的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)</span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOOKS=(base udev autodetect modconf block filesystems keyboard fsck usr shutdown)</span><br></pre></td></tr></table></figure><p>随后重制镜像并重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkinitcpio -P</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="Wayland"><a href="#Wayland" class="headerlink" title="Wayland"></a>Wayland</h2><p>Wayland 也是一种显示服务协议（display server protocol），致力于成为 Xorg 的优秀后继者。Wayland 亦有兼容 Xorg 和 KDE 的实现，且 SDDM 依然能使用，但在 KDE 环境中并无相对 Xorg 的明显优势。</p><p>参照<a href="https://wiki.archlinux.org/title/KDE#Installation">官方文档</a>在 Xorg 基础上安装 Wayland 相关的包，并在登录界面左上角选择桌面为“Plasma (Wayland)”。</p><p>注意使用 Wayland 作为显示服务协议时，一些教程中涉及到 <code>.xprofile</code> 等配置文件将会失效。读者需要根据实际情况正确配置。在此不作赘述。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;作为&lt;a href=&quot;https://wiki.archlinux.org/title/Installation_guide&quot;&gt;官方文档&lt;/a&gt;的补充，大致提供一些安装 Arch Linux 到物理机上并安装桌面环境的思路和文档中未提及的细节。&lt;/p&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    <category term="Tutorial" scheme="https://blog.tamako.work/categories/Essay/Tutorial/"/>
    
    
    <category term="Arch Linux" scheme="https://blog.tamako.work/tags/Arch-Linux/"/>
    
    <category term="Operating System" scheme="https://blog.tamako.work/tags/Operating-System/"/>
    
    <category term="Boot Loader" scheme="https://blog.tamako.work/tags/Boot-Loader/"/>
    
    <category term="Desktop" scheme="https://blog.tamako.work/tags/Desktop/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯真题：分巧克力</title>
    <link href="https://blog.tamako.work/acmoi/lanqiao/fen-qiao-ke-li/"/>
    <id>https://blog.tamako.work/acmoi/lanqiao/fen-qiao-ke-li/</id>
    <published>2022-03-19T01:55:58.000Z</published>
    <updated>2022-08-15T14:43:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>蓝桥杯 2017 年省赛真题《分巧克力》的 Python 解法。</p></blockquote><span id="more"></span><p>蓝桥杯 2017 年省赛真题：分巧克力。</p><p>题目链接：<a href="https://www.lanqiao.cn/problems/99/learning/">https://www.lanqiao.cn/problems/99/learning/</a>（需要登录）。</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>将 $N$ 块大小为 $H_i\times W_i$ 的巧克力切出部分分给 $K$ 人，要求分给 $K$ 人的巧克力大小相等且都为边长是整数的正方形。求可能分法中每人巧克力的边长最大值（测试点保证答案不小于 $1$）。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>$1\leq N,K,H_i,W_i\leq10^5$。</p><h3 id="运行限制"><a href="#运行限制" class="headerlink" title="运行限制"></a>运行限制</h3><ul><li>时间限制：2s。</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>注意到数据范围上限都是 $10^5$，可以猜测本题一解的时间复杂度为 $O(N\log N)$，继而联想到二分法。</p><p>那本题如何绕到二分上呢？先看选定不同的边长对分巧克力过程的影响。从题目中可知若记切出的巧克力的边长为 $a$，能切出 $b$ 块满足题设条件的巧克力，那么所有边长小于 $a$ 的切法均能切出<strong>不少于</strong> $b$ 块巧克力。换言之，若将考察范围内的边长排成一个序列，一定存在某个元素 $a_\mathrm{ans}$，使得在它之前的边长以及它本身<strong>都是</strong>满足题设条件的分法，而在它之后的边长<strong>都不满足</strong>——这就说明这个序列可以视作有序的，其元素值仅能被划分到“满足条件的”和“不满足条件的”两类中，而我们则需要找到这两类元素的“分界线”——这正是二分法的一种典型应用。</p><p>此外，我们发现，对于给定的边长 $a$ 和大小为 $H_i\times W_i$ 的巧克力，如果尽可能一块紧挨着一块切分，可以达到最大份数，具体数值为 $\left\lfloor\dfrac{H_i}{a}\right\rfloor\left\lfloor\dfrac{W_i}{a}\right\rfloor$。这也说明判断某个边长是否满足题设条件的时间复杂度为 $O(N)$。结合上述二分的描述过程，此解法的时间复杂度恰好为 $O(N\log N)$。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">n, k = <span class="built_in">map</span>(<span class="built_in">int</span>, sys.stdin.readline().rstrip().split())</span><br><span class="line">h, w = [<span class="literal">None</span>] * n, [<span class="literal">None</span>] * n</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    h[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, sys.stdin.readline().rstrip().split())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 考察范围的上限为所有巧克力中长和宽的最大值</span></span><br><span class="line">maxh, maxw = <span class="built_in">max</span>(h), <span class="built_in">max</span>(w)</span><br><span class="line">maxhw = <span class="built_in">max</span>(maxh, maxw)</span><br><span class="line"><span class="comment"># f[i] 为某个边长 i 是否满足题设条件</span></span><br><span class="line">f = [<span class="literal">None</span>] * (maxhw + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考：Python 安装目录下 Lib/bisect.py</span></span><br><span class="line"><span class="comment"># 注意：在更高 Python 版本中，内置模块 bisect 支持在二分查找和排序中加入 `key` 参数，若将判断边长是否符合条件的过程写成函数，则可以</span></span><br><span class="line"><span class="comment"># 直接代入 `bisect.bisect_left()`，且该内置函数经过 C 语言优化，运行速度更快。</span></span><br><span class="line">lo, hi = <span class="number">1</span>, maxhw + <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> lo &lt; hi:</span><br><span class="line">    mid = (lo + hi) // <span class="number">2</span></span><br><span class="line">    <span class="comment"># 若 `f[mid]` 未被计算出，则开始计算</span></span><br><span class="line">    <span class="keyword">if</span> f[mid] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        s = <span class="number">0</span>  <span class="comment"># 可分出的巧克力块数</span></span><br><span class="line">        f[mid] = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            s += (h[i] // mid) * (w[i] // mid)</span><br><span class="line">            <span class="comment"># 本题无需计算出分出巧克力的具体块数，则在判断出其已经超过 `k` 时直接跳出</span></span><br><span class="line">            <span class="keyword">if</span> s &gt;= k:</span><br><span class="line">                f[mid] = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> f[mid] == <span class="literal">True</span>:</span><br><span class="line">        lo = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hi = mid</span><br><span class="line"></span><br><span class="line"><span class="comment"># `lo` 即为 `bisect.bisect_left()` 的返回值，其为不符合题设条件的边长最小值</span></span><br><span class="line"><span class="built_in">print</span>(lo - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;蓝桥杯 2017 年省赛真题《分巧克力》的 Python 解法。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
    <category term="Programming" scheme="https://blog.tamako.work/tags/Programming/"/>
    
    <category term="Python" scheme="https://blog.tamako.work/tags/Python/"/>
    
    <category term="ACM" scheme="https://blog.tamako.work/tags/ACM/"/>
    
    <category term="OI" scheme="https://blog.tamako.work/tags/OI/"/>
    
    <category term="Lanqiao" scheme="https://blog.tamako.work/tags/Lanqiao/"/>
    
    <category term="Problem" scheme="https://blog.tamako.work/tags/Problem/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯真题：纯质数</title>
    <link href="https://blog.tamako.work/acmoi/lanqiao/chun-zhi-shu/"/>
    <id>https://blog.tamako.work/acmoi/lanqiao/chun-zhi-shu/</id>
    <published>2022-03-11T15:39:56.000Z</published>
    <updated>2022-08-15T14:43:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>蓝桥杯 2021 年国赛真题《纯质数》的 Python 解法。</p></blockquote><span id="more"></span><p>蓝桥杯 2021 年国赛真题：纯质数。</p><p>题目链接：<a href="https://www.lanqiao.cn/problems/1561/learning/">https://www.lanqiao.cn/problems/1561/learning/</a>（需要登录）。</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>输出 1 到 20210605 之间（包括两端）的“纯质数”（指十进制各数位皆为质数的质数，1 不视作质数）。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>本题是填空题，原则上无需时间复杂度较低的程序也可被接受。当然，这里将给出非填空题的解法。</p><p>Python 在大数据规模的循环上耗时较大，而本题显然绕不开判断质数这一话题——乍看本题给出的数据规模达到了千万级，判断其是否为质数最坏情况下需要千级别的循环，而我们要判断 20210605 个数字是否为质数，这个耗时显然是不可接受的（预测在 C/C++ 下也难以接受）。</p><p>因此我们可以考虑<strong>能否降低需要判断是否为质数的数字的数量</strong>。注意到本题中所提到的“纯质数”不仅要求其本身是质数，还要求十进制各数位也为质数——这下我们可以先借此排除掉<strong>一定</strong>不是纯质数的数字，继而大大简化运算量。</p><p>经过分析，我们得知如果一个数要满足“十进制各数位为质数”这一条件，必须满足各个数位只可取 2、3、5、7 中的一个。粗略来看，我们省下了约五分之三的运算量。而更进一步，对于不小于 10 的数字，个位数若为 2 或 5，则一定是合数，故也可提前去除。</p><p>为了更好地实现上面的需求，我们最好是自行生成纯质数的“候选”，而不是生成一个长度为 20210605 的列表再删除不符合条件的。每一个数位有可以选择的数字，而这些选择都是<strong>互不干扰</strong>的，因此我们可以利用标准库 <code>itertools</code> 里的 <code>product()</code> 生成器生成笛卡尔积，以便于快速生成符合条件的数字。实现这一需求的主要代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line"><span class="comment"># （不小于 10 的数字）非个位可取的数字集合、个位可取的数字集合</span></span><br><span class="line">_a, _b = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>), (<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成“候选”数字的生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">candidate_gen</span>():</span></span><br><span class="line">    <span class="comment"># 1 位数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> _a:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">    <span class="comment"># 2~8 位数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">9</span>):</span><br><span class="line">        <span class="comment"># star expression，表示生成 (i-1) 个 `_a`，一个 `_b`</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> product(*([_a] * (i-<span class="number">1</span>)), _b):</span><br><span class="line">            <span class="comment"># `j` 是一个由各个数位组成的元组，需要先将其拼成一个整数</span></span><br><span class="line">            x = packtup(j)</span><br><span class="line">            <span class="comment"># 超出范围，终止生成</span></span><br><span class="line">            <span class="keyword">if</span> x &gt; <span class="number">20210605</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">yield</span> x</span><br></pre></td></tr></table></figure><p>判断质数的代码较为简单，在此不作详述，注意设置循环时除数的上限略高于目标数字的算术平方根即可。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line">_a, _b = (<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>), (<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">packtup</span>(<span class="params">t</span>):</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> i: t[::-<span class="number">1</span>][i] * <span class="number">10</span> ** i, <span class="built_in">range</span>(<span class="built_in">len</span>(t))))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">candidate_gen</span>():</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> _a:</span><br><span class="line">    <span class="keyword">yield</span> i</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> product(*([_a] * (i-<span class="number">1</span>)), _b):</span><br><span class="line">      x = packtup(j)</span><br><span class="line">      <span class="keyword">if</span> x &gt; <span class="number">20210605</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">yield</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isprime</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">if</span> x == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="built_in">int</span>(x ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> x % i == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isprime, candidate_gen()))))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;蓝桥杯 2021 年国赛真题《纯质数》的 Python 解法。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
    <category term="Programming" scheme="https://blog.tamako.work/tags/Programming/"/>
    
    <category term="Python" scheme="https://blog.tamako.work/tags/Python/"/>
    
    <category term="ACM" scheme="https://blog.tamako.work/tags/ACM/"/>
    
    <category term="OI" scheme="https://blog.tamako.work/tags/OI/"/>
    
    <category term="Lanqiao" scheme="https://blog.tamako.work/tags/Lanqiao/"/>
    
    <category term="Problem" scheme="https://blog.tamako.work/tags/Problem/"/>
    
  </entry>
  
  <entry>
    <title>【实测】Python 和 C++ 下字符串查找的速度对比</title>
    <link href="https://blog.tamako.work/techdev/python-cpp-string-find-perf-test/"/>
    <id>https://blog.tamako.work/techdev/python-cpp-string-find-perf-test/</id>
    <published>2022-03-07T09:12:48.000Z</published>
    <updated>2022-03-07T09:19:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在备战一场算法竞赛，语言误选了 Python ，无奈只能着手对常见场景进行语言迁移。而字符串查找的场景在算法竞赛中时有出现。本文即对此场景在 Python 和竞赛常用语言 C++ 下的速度进行对比，并提供相关参数和运行结果供他人参考。</p></blockquote><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在备战一场算法竞赛，语言误选了 Python ，无奈只能着手对常见场景进行语言迁移。而字符串查找的场景在算法竞赛中时有出现。本文即对此场景在 Python 和竞赛常用语言 C++ 下的速度进行对比，并提供相关参数和运行结果供他人参考。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="硬件和操作系统"><a href="#硬件和操作系统" class="headerlink" title="硬件和操作系统"></a>硬件和操作系统</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">                  -`                    root@&lt;hostname&gt;</span><br><span class="line">                 .o+`                   ------------</span><br><span class="line">                `ooo/                   OS: Arch Linux ARM aarch64</span><br><span class="line">               `+oooo:                  Host: Raspberry Pi 4 Model B</span><br><span class="line">              `+oooooo:                 Kernel: 5.16.12-1-aarch64-ARCH</span><br><span class="line">              -+oooooo+:                Uptime: 3 hours, 32 mins</span><br><span class="line">            `/:-:++oooo+:               Packages: 378 (pacman)</span><br><span class="line">           `/++++/+++++++:              Shell: zsh 5.8.1</span><br><span class="line">          `/++++++++++++++:             Terminal: /dev/pts/0</span><br><span class="line">         `/+++ooooooooooooo/`           CPU: (4) @ 1.500GHz</span><br><span class="line">        ./ooosssso++osssssso+`          Memory: 102MiB / 7797MiB</span><br><span class="line">       .oossssso-````/ossssss+`</span><br><span class="line">      -osssssso.      :ssssssso.</span><br><span class="line">     :osssssss/        osssso+++.</span><br><span class="line">    /ossssssss/        +ssssooo/-</span><br><span class="line">  `/ossssso+/:-        -:/+osssso+-</span><br><span class="line"> `+sso+:-`                 `.-/+oso:</span><br><span class="line">`++:.                           `-/+/</span><br><span class="line">.`                                 `/</span><br></pre></td></tr></table></figure><h3 id="编译环境和解释环境"><a href="#编译环境和解释环境" class="headerlink" title="编译环境和解释环境"></a>编译环境和解释环境</h3><ul><li>Python<ul><li>解释器：Python 3.10.2 (main, Jan 23 2022, 21:20:14) [GCC 10.2.0] on linux</li><li>交互环境：IPython 8.0.1</li></ul></li><li>C++<ul><li>编译器：g++ (GCC) 11.2.0</li><li>编译命令：<code>g++ test.cpp -Wall -O2 -g -std=c++11 -o test</code></li></ul></li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>本次实测设置两个场景：场景 1 的源串字符分布使用伪随机数生成器生成，表示字符串查找的平均情况；场景 2 的源串可连续分割成 20,000 个长度为 50 的字符片段，其中第 15,001 个即为模式串，形如“ab…b”（1 个“a”，49 个 “b”），其余的字符片段形如“ab…c”（1 个“a”，48 个“b”，1 个“c”）。</p><table><thead><tr><th align="center">项目</th><th align="center">场景 1：平均情况</th><th align="center">场景 2：较坏情况</th></tr></thead><tbody><tr><td align="center">字符集</td><td align="center">小写字母</td><td align="center"><code>abc</code></td></tr><tr><td align="center">字符分布</td><td align="center"><code>random.choice</code></td><td align="center">有较强规律性</td></tr><tr><td align="center">源串长度</td><td align="center">1,000,000</td><td align="center">1,000,000</td></tr><tr><td align="center">模式串长度</td><td align="center">1,000</td><td align="center">50</td></tr><tr><td align="center">模式串出现位置</td><td align="center">250,000、500,000、750,000</td><td align="center">750,000</td></tr><tr><td align="center">模式串出现次数</td><td align="center">1</td><td align="center">1</td></tr></tbody></table><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><p>本次实测中，Python 语言使用内置类型 <code>str</code> 的 <code>.find()</code> 成员函数，C++ 语言分别使用 <code>string</code> 类的 <code>.find()</code> 成员函数、<code>strstr</code> 标准库函数和用户实现的 KMP 算法。</p><table><thead><tr><th align="center">测试对象</th><th align="center">核心代码</th></tr></thead><tbody><tr><td align="center">Python</td><td align="center"><code>src.find(pat)</code></td></tr><tr><td align="center">C++ - <code>test.cpp</code></td><td align="center"><code>src.find(pat)</code></td></tr><tr><td align="center">C++ - <code>test_strstr.cpp</code></td><td align="center"><code>strstr(src, pat)</code></td></tr><tr><td align="center">C++ - <code>test_kmp.cpp</code></td><td align="center"><code>KMP(src, pat)</code></td></tr></tbody></table><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><h3 id="生成源串和模式串"><a href="#生成源串和模式串" class="headerlink" title="生成源串和模式串"></a>生成源串和模式串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 场景 1：</span></span><br><span class="line"><span class="comment"># 源串</span></span><br><span class="line">s = <span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(random.choice(<span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>), <span class="built_in">ord</span>(<span class="string">&quot;z&quot;</span>) + <span class="number">1</span>))) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>))</span><br><span class="line"><span class="comment"># 模式串列表，三个元素各对应一个模式串</span></span><br><span class="line">p = [s[<span class="number">250000</span>:<span class="number">251000</span>], s[<span class="number">500000</span>:<span class="number">501000</span>], s[<span class="number">750000</span>:<span class="number">751000</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 场景 2：</span></span><br><span class="line"><span class="comment"># 模式串</span></span><br><span class="line">p = <span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;b&#x27;</span> * <span class="number">49</span></span><br><span class="line"><span class="comment"># 其他字符片段</span></span><br><span class="line">_s = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span> * <span class="number">48</span> + <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="comment"># 源串</span></span><br><span class="line">s = _s * <span class="number">15000</span> + p + _s * <span class="number">4999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储到文件，便于 C++ 程序获取</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;source.in&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(s)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pattern.in&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(p[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In []: %timeit s.find(p[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="C-test-cpp"><a href="#C-test-cpp" class="headerlink" title="C++ - test.cpp"></a>C++ - <code>test.cpp</code></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOP_COUNT (1000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::chrono::high_resolution_clock;</span><br><span class="line"><span class="keyword">using</span> std::chrono::duration_cast;</span><br><span class="line"><span class="keyword">using</span> std::chrono::duration;</span><br><span class="line"><span class="keyword">using</span> std::chrono::milliseconds;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">test</span><span class="params">(string s, string p, <span class="keyword">size_t</span>* pos_ptr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> t1 = high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    *pos_ptr = s.<span class="built_in">find</span>(p);</span><br><span class="line">    <span class="keyword">auto</span> t2 = high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    duration&lt;<span class="keyword">double</span>, milli&gt; ms_double = t2 - t1;</span><br><span class="line">    <span class="keyword">return</span> ms_double.<span class="built_in">count</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s, p;</span><br><span class="line">    <span class="keyword">size_t</span> pos;</span><br><span class="line">    <span class="function">ifstream <span class="title">srcfile</span><span class="params">(<span class="string">&quot;source.in&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">patfile</span><span class="params">(<span class="string">&quot;pattern.in&quot;</span>)</span></span>;</span><br><span class="line">    srcfile &gt;&gt; s;</span><br><span class="line">    patfile &gt;&gt; p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> tot_time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LOOP_COUNT; ++i) &#123;</span><br><span class="line">        tot_time += <span class="built_in">test</span>(s, p, &amp;pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Loop count:            &quot;</span> &lt;&lt; LOOP_COUNT &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Source string length:  &quot;</span> &lt;&lt; s.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Pattern string length: &quot;</span> &lt;&lt; p.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Search result:         &quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Time:                  &quot;</span> &lt;&lt; tot_time / LOOP_COUNT &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-test-strstr-cpp"><a href="#C-test-strstr-cpp" class="headerlink" title="C++ - test_strstr.cpp"></a>C++ - <code>test_strstr.cpp</code></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOP_COUNT (1000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::chrono::high_resolution_clock;</span><br><span class="line"><span class="keyword">using</span> std::chrono::duration_cast;</span><br><span class="line"><span class="keyword">using</span> std::chrono::duration;</span><br><span class="line"><span class="keyword">using</span> std::chrono::milliseconds;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000005</span>], p[<span class="number">1005</span>], *pos=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">test</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">char</span>* p, <span class="keyword">char</span>** pos_ptr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> t1 = high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    *pos_ptr = <span class="built_in">strstr</span>(s, p);</span><br><span class="line">    <span class="keyword">auto</span> t2 = high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    duration&lt;<span class="keyword">double</span>, milli&gt; ms_double = t2 - t1;</span><br><span class="line">    <span class="keyword">return</span> ms_double.<span class="built_in">count</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">srcfile</span><span class="params">(<span class="string">&quot;source.in&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">patfile</span><span class="params">(<span class="string">&quot;pattern.in&quot;</span>)</span></span>;</span><br><span class="line">    srcfile &gt;&gt; s;</span><br><span class="line">    patfile &gt;&gt; p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> tot_time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LOOP_COUNT; ++i) &#123;</span><br><span class="line">        tot_time += <span class="built_in">test</span>(s, p, &amp;pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Loop count:            &quot;</span> &lt;&lt; LOOP_COUNT &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Source string length:  &quot;</span> &lt;&lt; <span class="built_in">strlen</span>(s) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Pattern string length: &quot;</span> &lt;&lt; <span class="built_in">strlen</span>(p) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Search result:         &quot;</span> &lt;&lt; pos - s &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Time:                  &quot;</span> &lt;&lt; tot_time / LOOP_COUNT &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-test-kmp-cpp"><a href="#C-test-kmp-cpp" class="headerlink" title="C++ - test_kmp.cpp"></a>C++ - <code>test_kmp.cpp</code></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOP_COUNT (1000)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> std::chrono::high_resolution_clock;</span><br><span class="line"><span class="keyword">using</span> std::chrono::duration_cast;</span><br><span class="line"><span class="keyword">using</span> std::chrono::duration;</span><br><span class="line"><span class="keyword">using</span> std::chrono::milliseconds;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = s.<span class="built_in">length</span>(), n = p.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; n) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * (n+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = dp[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; p[j] != p[i]) j = dp[j];</span><br><span class="line">        <span class="keyword">if</span> (j &gt; <span class="number">0</span> || p[j] == p[i]) dp[i+<span class="number">1</span>] = j + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        <span class="keyword">if</span> (s[i] == p[j]) &#123; <span class="keyword">if</span> (++j == n) <span class="keyword">return</span> i - j + <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            j = dp[j];</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">test</span><span class="params">(string s, string p, <span class="keyword">int</span>* pos_ptr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> t1 = high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    *pos_ptr = <span class="built_in">KMP</span>(s, p);</span><br><span class="line">    <span class="keyword">auto</span> t2 = high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">    duration&lt;<span class="keyword">double</span>, milli&gt; ms_double = t2 - t1;</span><br><span class="line">    <span class="keyword">return</span> ms_double.<span class="built_in">count</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s, p;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="function">ifstream <span class="title">srcfile</span><span class="params">(<span class="string">&quot;source.in&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">patfile</span><span class="params">(<span class="string">&quot;pattern.in&quot;</span>)</span></span>;</span><br><span class="line">    srcfile &gt;&gt; s;</span><br><span class="line">    patfile &gt;&gt; p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> tot_time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LOOP_COUNT; ++i) &#123;</span><br><span class="line">        tot_time += <span class="built_in">test</span>(s, p, &amp;pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Loop count:            &quot;</span> &lt;&lt; LOOP_COUNT &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Source string length:  &quot;</span> &lt;&lt; s.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Pattern string length: &quot;</span> &lt;&lt; p.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Search result:         &quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Time:                  &quot;</span> &lt;&lt; tot_time / LOOP_COUNT &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>IPython 的 <code>%timeit</code> 魔法命令可以输出代码多次执行的平均时间和标准差，在此取平均时间。C++ 的代码对每个模式串固定运行 1,000 次后取平均时间。</p><p>以下时间若无特别说明，均以微秒为单位，保留到整数位。</p><table><thead><tr><th align="center">场景</th><th align="center">模式串出现位置</th><th align="center">Python</th><th align="center">C++ - <code>test.cpp</code></th><th align="center">C++ - <code>test_strstr.cpp</code></th><th align="center">C++ - <code>test_kmp.cpp</code></th></tr></thead><tbody><tr><td align="center">场景 1</td><td align="center">250,000</td><td align="center">105</td><td align="center">523</td><td align="center">155</td><td align="center">2564</td></tr><tr><td align="center">场景 1</td><td align="center">500,000</td><td align="center">183</td><td align="center">1053</td><td align="center">274</td><td align="center">3711</td></tr><tr><td align="center">场景 1</td><td align="center">750,000</td><td align="center">291</td><td align="center">1589</td><td align="center">447</td><td align="center">4900</td></tr><tr><td align="center">场景 2</td><td align="center">750,000</td><td align="center">2630*</td><td align="center">618</td><td align="center">353</td><td align="center">3565</td></tr></tbody></table><p>* 原输出为“2.63 ms”。IPython 的 <code>%timeit</code> 输出的均值保留 3 位有效数字，由于此时间已超过 1 毫秒，微秒位被舍弃。此处仍以微秒作单位，数值记为“2630”。</p><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><p>本次实测时使用的设备硬件上劣于算法竞赛中的标准配置机器，实测结果中的“绝对数值”参考性较低。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据上表中的结果，在给定环境和相关参数条件下，场景 1 中 Python 的运行时间大约为 C++ 中 <code>string::find</code> 的五分之一，与 <code>std:strstr</code> 接近；而在场景 2 中 Python 的运行时间明显增长，但 C++ 的前两种测试方法的运行时间与先前接近甚至更短。四次测试中，C++ 的用户实现的 KMP 算法运行时间均较长，长于同条件下 Python 的情况。</p><p>Python 中的内置类型 <code>str</code> 的快速查找（<code>.find()</code>）和计数（<code>.count()</code>）算法基于 <a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm">Boyer-Moore 算法</a>和 <a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm">Horspool 算法</a>的混合，其中后者是前者的简化，而前者与 <a href="https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm">Knuth-Morris-Pratt 算法</a>有关。</p><p>有关 C++ 的 <code>string::find</code> 比 <code>std::strstr</code> 运行时间长的相关情况，参见 <a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66414"><strong>Bug 66414</strong> - string::find ten times slower than strstr</a>。</p><p>值得关注的是：C++ 中自行实现的 KMP 算法的运行时间竟然远长于 C++ 标准库甚至 Python 中的算法。这也类似于常说的“自己设计汇编代码运行效率低于编译器”的情况。Stack Overflow 的一个问题 <a href="https://stackoverflow.com/questions/7586990/strstr-faster-than-algorithms">strstr faster than algorithms?</a> 下有人<a href="https://stackoverflow.com/a/7587069/12002560">回答</a>如下：</p><blockquote><p>Why do you think <code>strstr</code> should be slower than all the others? Do you know what algorithm <code>strstr</code> uses? I think it’s quite likely that <code>strstr</code> uses a fine-tuned, processor-specific, assembly-coded algorithm of the <code>KMP</code> type or better. In which case you don’t stand a chance of out-performing it in <code>C</code> for such small benchmarks.</p></blockquote><p>KMP 算法并非是所有线性复杂度算法中最快的。在不同的环境（软硬件、测试数据等）下，KMP 与其变种乃至其他线性复杂度算法，孰优孰劣都无法判断。编译器在设计时考虑到诸多可能的因素，尽可能使不同环境下都能有相对较优的策略来得到结果。因而，在保证结果正确的情况下，与其根据算法原理自行编写，不如直接使用标准库中提供的函数。</p><p>同时本次实测也在运行时间角度再次印证 Python 并不适合在算法竞赛中取得高成绩的说法。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/22387586/measuring-execution-time-of-a-function-in-c">https://stackoverflow.com/questions/22387586/measuring-execution-time-of-a-function-in-c</a></li><li><a href="https://www.cplusplus.com/reference/string/string/find/">https://www.cplusplus.com/reference/string/string/find/</a></li><li><a href="https://stackoverflow.com/questions/681649/how-is-string-find-implemented-in-cpython">https://stackoverflow.com/questions/681649/how-is-string-find-implemented-in-cpython</a></li><li><a href="https://github.com/python/cpython/blob/main/Objects/stringlib/fastsearch.h#L5">https://github.com/python/cpython/blob/main/Objects/stringlib/fastsearch.h#L5</a></li><li><a href="https://stackoverflow.com/questions/8869605/c-stringfind-complexity">https://stackoverflow.com/questions/8869605/c-stringfind-complexity</a></li><li><a href="https://stackoverflow.com/questions/19506571/can-it-be-faster-to-find-the-minimum-periodic-string-inside-another-string-in-te">https://stackoverflow.com/questions/19506571/can-it-be-faster-to-find-the-minimum-periodic-string-inside-another-string-in-te</a></li><li><a href="https://gcc.gnu.org/onlinedocs/gcc-9.4.0/libstdc++/api/a17342_source.html">https://gcc.gnu.org/onlinedocs/gcc-9.4.0/libstdc++/api/a17342_source.html</a></li><li><a href="https://opensource.apple.com/source/tcl/tcl-10/tcl/compat/strstr.c.auto.html">https://opensource.apple.com/source/tcl/tcl-10/tcl/compat/strstr.c.auto.html</a></li><li><a href="https://gist.github.com/hsinewu/44a1ce38a1baf47893922e3f54807713">https://gist.github.com/hsinewu/44a1ce38a1baf47893922e3f54807713</a></li><li><a href="https://stackoverflow.com/questions/11799956/performance-comparison-strstr-vs-stdstringfind">https://stackoverflow.com/questions/11799956/performance-comparison-strstr-vs-stdstringfind</a></li><li><a href="https://stackoverflow.com/questions/7586990/strstr-faster-than-algorithms">https://stackoverflow.com/questions/7586990/strstr-faster-than-algorithms</a></li><li><a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66414">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66414</a></li><li><a href="http://0x80.pl/notesen/2016-10-08-slow-std-string-find.html">http://0x80.pl/notesen/2016-10-08-slow-std-string-find.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近在备战一场算法竞赛，语言误选了 Python ，无奈只能着手对常见场景进行语言迁移。而字符串查找的场景在算法竞赛中时有出现。本文即对此场景在 Python 和竞赛常用语言 C++ 下的速度进行对比，并提供相关参数和运行结果供他人参考。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Essay" scheme="https://blog.tamako.work/categories/Essay/"/>
    
    
    <category term="Programming" scheme="https://blog.tamako.work/tags/Programming/"/>
    
    <category term="Python" scheme="https://blog.tamako.work/tags/Python/"/>
    
    <category term="C++" scheme="https://blog.tamako.work/tags/C/"/>
    
    <category term="Performance" scheme="https://blog.tamako.work/tags/Performance/"/>
    
  </entry>
  
</feed>
